{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Web3 Pi          documentation <p>         This documentation provides everything you need to get started with Web3 Pi.Find step-by-step guides for setup, detailed explanations of features, monitoring tools, troubleshooting and tips for running your Ethereum node smoothly on Raspberry Pi.         </p>              Get Started"},{"location":"#learn","title":"Learn","text":"<p>Learn more about the Web3 Pi project and benefits of running an Ethereum node on a Raspberry Pi.</p> <ul> <li> <p> About Web3 Pi</p> <p>Essential information before starting your Web3 Pi journey</p> <p> The Web3 Pi Project</p> </li> <li> <p> Running an Ethereum Node</p> <p>Learn about the benefits of running your very own Ethereum node on a Raspberry Pi</p> <p> What is an Ethereum Node?</p> </li> </ul>"},{"location":"#setup-configuration","title":"Setup &amp; Configuration","text":"<p>Get started with running your very own Ethereum node on a Raspberry Pi.</p> <ul> <li> <p> Prerequisites</p> <p>Hardware and software requirements to run an Ethereum node on a Raspberry Pi</p> <p> Prerequisites</p> </li> <li> <p> Setup Guide</p> <p>A complete step-by-step guide to setting up your own Ethereum node on a Raspberry Pi using Web3 Pi</p> <p> Setup guide</p> </li> </ul>"},{"location":"#monitoring-management","title":"Monitoring &amp; Management","text":"<p>Tips and tricks to keep your node running smoothly.</p> <ul> <li> <p> Monitoring</p> <p>Learn how to monitor your node</p> <p> Managing your node</p> </li> <li> <p> Management</p> <p>Learn how to manage and maintain your node</p> <p> Managing your node</p> </li> <li> <p> Troubleshooting</p> <p>Learn how to troubleshoot common issues</p> <p> Troubleshooting</p> </li> </ul>"},{"location":"advanced-setup/","title":"Advanced Setup","text":"<p>This section provides advanced setup guides for your Web3 Pi node that aim to optimize your node's performance and reliability. None of these steps are required, but they can help you achieve better uptime and reduce maintenance burden.</p>"},{"location":"advanced-setup/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Two-Factor Authentication (2FA) - Add an extra layer of security to your Cockpit login.</li> <li>Backup Power - Consider adding a backup power source to your node, in case of power outages.</li> <li>Power over Ethernet - Use PoE (Power over Ethernet) instead of the included power supply.</li> <li>Firewall Configuration (UFW) - Configure UFW to control incoming and outgoing network traffic.</li> <li>The config.txt File - Learn how to configure boot options, hardware interfaces, and more.</li> <li>Overclocking - Learn how to overclock your Raspberry Pi to improve performance.</li> </ul>"},{"location":"advanced-setup/2fa/","title":"Two-Factor Authentication (2FA) for Cockpit","text":"<p>Adding Two-Factor Authentication (2FA) to Cockpit increases the security of your server by requiring a time-based one-time password (TOTP) in addition to your regular credentials.</p> <p>The Web3 Pi team developed a plugin to easily enable 2FA in Cockpit using a graphical interface. Alternatively, you can manually configure 2FA using the <code>libpam-google-authenticator</code> package.</p> Using the official pluginInstalling manually"},{"location":"advanced-setup/2fa/#step-1-install-required-packages","title":"Step 1: Install Required Packages","text":"<p>Navigate to the <code>Web3 Pi Updater</code> section in Cockpit and install <code>Two Factor Authentication Plugin for Cockpit</code>:</p> <p></p> <p>Alternatively, you can install the plugin manually by opening a terminal and running the following command:</p> <pre><code>sudo apt-get install w3p-two-factor-auth\n</code></pre> <p>Note</p> <p>Cockpit will restart after the installation of the plugin, so you may need to refresh the page and log in again.</p>"},{"location":"advanced-setup/2fa/#step-2-configure-2fa","title":"Step 2: Configure 2FA","text":"<p>After installing the plugin, navigate to the <code>Web3 Pi 2FA</code> section in Cockpit:</p> <p></p> <p>Click <code>Enable Two-Factor Authentication</code> to start the setup process.</p> <p></p> <p>Follow the on-screen instructions to set up 2FA:</p> <ol> <li>Scan the QR code with your preferred authenticator app (e.g., Google Authenticator, Authy).</li> <li>Enter the verification code from your authenticator app to complete the setup.</li> <li>Save the emergency scratch codes in a safe place.</li> </ol> <p>Note</p> <p>Scratch codes are one-time use only. If you lose access to your authenticator app, enter one of these codes to log in and recreate your 2FA setup.</p>"},{"location":"advanced-setup/2fa/#step-3-test-your-setup","title":"Step 3: Test Your Setup","text":"<ol> <li>Log out of Cockpit.</li> <li>Log back in. You should be prompted for a verification code from your authenticator app.</li> </ol>"},{"location":"advanced-setup/2fa/#uninstalling-2fa","title":"Uninstalling 2FA","text":"<p>To remove 2FA from Cockpit, navigate back to the <code>Web3 Pi 2FA</code> section and click <code>Disable Two-Factor Authentication</code>.</p> <p></p>"},{"location":"advanced-setup/2fa/#step-1-install-required-packages_1","title":"Step 1: Install Required Packages","text":"<p>Open a terminal and run:</p> <pre><code>sudo apt-get install libpam-google-authenticator -y\n</code></pre> <p>This installs the PAM module for Google Authenticator.</p>"},{"location":"advanced-setup/2fa/#step-2-configure-google-authenticator-for-your-user","title":"Step 2: Configure Google Authenticator for Your User","text":"<p>Run the following command to set up Google Authenticator with recommended options:</p> <pre><code>google-authenticator -t -d -f -r 3 -R 30 -W -Q UTF8\n</code></pre> <p>Note</p> <ul> <li><code>-t</code> use TOTP instead of HOTP (recommended).</li> <li><code>-d</code> disable reuse of previously used TOTP tokens.</li> <li><code>-f</code> disable confirmation before writing the <code>~/.google_authenticator</code> file.</li> <li><code>-r 3 -R 30</code> limits the number of login attempts to 3 every 30 seconds.</li> <li><code>-W</code> by default google-authenticator allows the use of codes that were generated a little before or a little after the current time. This option disables that feature (recommended for security).</li> <li><code>-Q UTF8</code> specifies the encoding for the QR code. Change to <code>-Q ANSI</code> if you're having issues with viewing the QR code.</li> </ul> <ul> <li>This will generate a secret key, QR code, and emergency scratch codes.</li> <li>Scan the QR code with your preferred authenticator app (e.g., Google Authenticator, Authy).</li> <li>Enter the verification code from your authenticator app to complete the setup.</li> <li>Save the emergency scratch codes in a safe place. </li> </ul> <p>Note</p> <p>Scratch codes are one-time use only. If you lose access to your authenticator app, enter one of these codes to log in and recreate your 2FA setup.</p>"},{"location":"advanced-setup/2fa/#step-3-enable-2fa-for-cockpit","title":"Step 3: Enable 2FA for Cockpit","text":"<p>Use the following command to add the Google Authenticator PAM module to the Cockpit PAM configuration:</p> <pre><code>sudo bash -c 'echo \"auth required pam_google_authenticator.so nullok\" &gt;&gt; /etc/pam.d/cockpit'\n</code></pre> <p>This tells Cockpit to require a TOTP code during login.</p> <p>Note</p> <ul> <li>The <code>nullok</code> option disables 2FA for users that do not have a <code>~/.google_authenticator</code> file.</li> </ul>"},{"location":"advanced-setup/2fa/#step-4-restart-cockpit","title":"Step 4: Restart Cockpit","text":"<p>Restart the Cockpit service to apply the changes:</p> <pre><code>sudo systemctl restart cockpit\n</code></pre>"},{"location":"advanced-setup/2fa/#step-5-test-your-setup","title":"Step 5: Test Your Setup","text":"<ol> <li>Log out of Cockpit.</li> <li>Log back in. You should be prompted for a verification code from your authenticator app.</li> </ol>"},{"location":"advanced-setup/2fa/#uninstalling-2fa_1","title":"Uninstalling 2FA","text":"<p>To remove 2FA from Cockpit, simply delete the line you added to the PAM configuration:</p> <pre><code>sudo bash -c 'sed -i \"/pam_google_authenticator.so nullok/d\" /etc/pam.d/cockpit'\n</code></pre> <p>Then restart the Cockpit service:</p> <pre><code>sudo systemctl restart cockpit\n</code></pre> <p>You can also remove the generated <code>~/.google_authenticator</code> file and the installed packages if you no longer need 2FA:</p> <pre><code>sudo apt remove libpam-google-authenticator -y\nrm ~/.google_authenticator\n</code></pre>"},{"location":"advanced-setup/OC/","title":"Overclocking","text":""},{"location":"advanced-setup/OC/#raspberry-pi-5","title":"Raspberry Pi 5","text":"<p>There are two things that can be tweaked on the Raspberry Pi 5 to increase Ethereum Node performance.</p> <ul> <li>CPU frequency</li> <li>PCIe generation</li> </ul> <p>Note about PCIe generation settings</p> <p>This makes sense only if using a PCIe to m.2 adapter for storage.</p>"},{"location":"advanced-setup/OC/#cpu-overclocking","title":"CPU Overclocking","text":"<p>By default, the Raspberry Pi 5 CPU clock is set to 2.4 GHz, but it is relatively easy to overclock. An overclocked CPU with a significant load will require an active cooling solution or a high-quality cooling case.</p> <p>The maximum stable clock that can be achieved depends on a particular device.</p> <p>Safe for all devices is 2.6 GHz. The reasonable top is 3.0 GHz.</p> <p>The Raspberry Pi has enough power to handle an Ethereum node without OC, so our recommendation is to keep stable settings like 2.6 GHz.</p>"},{"location":"advanced-setup/OC/#how-to-overclock-the-cpu","title":"How to overclock the CPU","text":"<ul> <li>Edit the /boot/firmware/config.txt file:   <pre><code>sudo nano /boot/firmware/config.txt\n</code></pre></li> <li>Find the last <code>[pi5]</code> section, almost at the end of the file. Look for this comment:   <pre><code> [rpi5]\n # Overclocking for Raspberry Pi 5\n # Active cooling is required\n over_voltage_delta=50000\n arm_freq=2800\n #2400MHz is default\n #3000MHz is max (not all boards will work stable)\n #2800MHz is reasonable OC\n</code></pre></li> <li>Exit the editor by pressing <code>Ctrl+x</code> and save the changes.</li> <li>Restart the device:   <pre><code>sudo reboot\n</code></pre></li> <li>After reboot, you can check if the frequency is correctly recognized by the OS.</li> </ul> <pre><code>sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq\n</code></pre> <p>It should output <code>2600000</code></p> <p>If the procedure is successful, the device should be up and running with the updated OC settings.</p> <p>For more information about overclocking the Raspberry Pi 5, please visit:</p> <p>https://www.jeffgeerling.com/blog/2023/overclocking-and-underclocking-raspberry-pi-5</p>"},{"location":"advanced-setup/OC/#pcie-generation-select","title":"PCIe generation select","text":"<p>The Raspberry Pi by default uses PCIe gen 2. But the Broadcom BCM2712 offers PCIe generation 3, which is twice as fast. By default, it is set to gen 2 because of compatibility reasons with different adapters. In most cases, you can safely set it to gen 3, which can double the performance of the NVMe drive.</p> <ul> <li>Edit the /boot/firmware/config.txt file:   <pre><code>sudo nano /boot/firmware/config.txt\n</code></pre></li> <li>Find the last <code>[pi5]</code> section, almost at the end of the file. Look for this comment:   <pre><code> #Enable PCIe\n dtparam=pciex1\n #Enable PCIe gen.3 (default is gen.2)\n dtparam=pciex1_gen=3\n</code></pre></li> <li>Exit the editor by pressing <code>Ctrl+x</code> and save the changes.</li> <li>Restart the device:   <pre><code>sudo reboot\n</code></pre></li> </ul> <p>For more information, please visit: https://www.jeffgeerling.com/blog/2023/nvme-ssd-boot-raspberry-pi-5</p>"},{"location":"advanced-setup/OC/#raspberry-pi-4","title":"Raspberry Pi 4","text":"<p>To overclock the Raspberry Pi 4, you need to edit the config.txt file located in the /boot/firmware/ directory.</p> <ol> <li> <p>Access the File:</p> </li> <li> <p>Open a terminal on your Raspberry Pi.</p> </li> <li>Edit the <code>config.txt</code> file using a text editor such as <code>nano</code>.</li> </ol> <pre><code>sudo nano /boot/firmware/config.txt\n</code></pre> <ol> <li> <p>Add Overclocking Settings:</p> </li> <li> <p>Uncomment the following lines near the end of the <code>config.txt</code> file. Adjust the values based on your desired overclock settings and the stability of your system.</p> </li> </ol> <pre><code>[pi4]\nover_voltage=6\narm_freq=1800\ngpu_freq=600\n</code></pre> <p>Explanation:</p> <ul> <li><code>over_voltage=6</code>: Increases the core voltage. Values range from 0 to 8. Higher values increase stability but also generate more heat.</li> <li><code>arm_freq=1800</code>: Sets the CPU frequency to 1800 MHz (1.8 GHz).<ul> <li>The default is 1500 MHz</li> <li>Moderate OC is 1800 MHz</li> <li>A high overclock is 2000 MHz</li> </ul> </li> <li> <p><code>gpu_freq=600</code>: Sets the GPU frequency to 600 MHz.</p> <ul> <li>The default is 500 MHz</li> <li>Moderate OC is 600 MHz</li> <li>A high overclock is 750 MHz</li> </ul> </li> <li> <p>Save and Reboot:</p> </li> <li> <p>Save the file (<code>Ctrl+O</code> and <code>Enter</code> in nano) and exit the text editor (<code>Ctrl+X</code> in nano).</p> </li> <li>Reboot the Raspberry Pi to apply the changes.</li> </ul> <pre><code>sudo reboot\n</code></pre>"},{"location":"advanced-setup/OC/#raspberry-pi-cm4","title":"Raspberry Pi CM4","text":"<p>Overclocking the Raspberry Pi Compute Module 4 (CM4) is similar to overclocking the Raspberry Pi 4, but there are a few key differences to consider due to the form factor and intended use cases of the CM4.</p>"},{"location":"advanced-setup/OC/#similarities","title":"Similarities","text":"<ol> <li>Configuration File:</li> <li>Both use the <code>config.txt</code> file located in the <code>/boot</code> directory for overclocking settings.</li> <li> <p>Overclocking Parameters:</p> </li> <li> <p>Parameters such as <code>over_voltage</code>, <code>arm_freq</code>, and <code>gpu_freq</code> are used in the same way to adjust voltage, CPU frequency, and GPU frequency.</p> </li> <li> <p>Monitoring and Testing:</p> </li> <li>Tools and methods for monitoring temperature, checking for throttling, and stress testing are the same.</li> </ol>"},{"location":"advanced-setup/OC/#differences","title":"Differences","text":"<ol> <li> <p>Form Factor and Cooling:</p> </li> <li> <p>The CM4 is designed to be used with custom carrier boards, which may affect cooling solutions. Ensure your carrier board design allows for adequate cooling, especially when overclocking.</p> </li> <li> <p>Power Supply:</p> </li> <li>The power supply and power delivery to the CM4 might be different depending on the carrier board. Ensure that the carrier board can supply sufficient power for overclocking.</li> </ol>"},{"location":"advanced-setup/OC/#monitoring-and-stability","title":"Monitoring and Stability","text":"<ol> <li> <p>Monitor Temperatures</p> </li> <li> <p>Use tools like <code>vcgencmd</code> to monitor the temperature of your Raspberry Pi.</p> </li> </ol> <pre><code>vcgencmd measure_temp\n</code></pre> <ul> <li> <p>Ideally, temperatures should remain below 85\u00b0C. If temperatures are higher, consider improving your cooling solution.</p> </li> <li> <p>Stress Test</p> </li> <li> <p>Run stress tests to ensure stability. The <code>stress</code> tool can be used for this purpose.</p> </li> </ul> <pre><code>sudo apt install stress\nstress --cpu 4 --timeout 600\n</code></pre> <ol> <li> <p>Check for Throttling</p> </li> <li> <p>Use <code>vcgencmd</code> to check if the Raspberry Pi is throttling due to high temperatures or insufficient power.</p> </li> </ol> <pre><code>vcgencmd get_throttled\n</code></pre> <ul> <li>A result of <code>0x0</code> indicates no throttling.</li> </ul>"},{"location":"advanced-setup/OC/#safety-tips","title":"Safety Tips","text":"<ol> <li>Incremental Changes: Start with small increments and gradually increase the values. Monitor stability and temperatures at each step.</li> <li>Cooling: Ensure you have sufficient cooling. Consider adding a fan or better heatsinks if necessary.</li> <li>Power Supply: Use a high-quality power supply that can handle the increased power demands.</li> <li>Testing: Perform extensive testing to ensure that your system remains stable under load.</li> </ol>"},{"location":"advanced-setup/OC/#conclusion","title":"Conclusion","text":"<p>Overclocking the Raspberry Pi can provide significant performance improvements, making it more capable for an Ethereum node. However, it is crucial to approach overclocking with caution, ensuring adequate cooling and power supply, and thoroughly testing for stability. By following these guidelines, you can safely and effectively overclock your Raspberry Pi to meet your performance needs.</p>"},{"location":"advanced-setup/config/","title":"Advanced Setup: The config.txt File","text":""},{"location":"advanced-setup/config/#overview","title":"Overview","text":"<p>Web3 Pi utilizes a central configuration file, <code>/boot/firmware/config.txt</code>, to manage both its own settings (like which clients to run and network selection) and the underlying Raspberry Pi hardware configuration (like boot options, hardware interfaces, and overclocking).</p> <p>This file is read by the Raspberry Pi firmware during the early boot process.</p> <p>For most users, the default settings generated by the Web3 Pi Imager are sufficient and should not need modification. This page is intended for advanced users who understand the implications of changing these parameters.</p> <p>\u26a0\ufe0f WARNING: Incorrectly editing <code>/boot/firmware/config.txt</code> can prevent your Raspberry Pi from booting correctly or cause your Ethereum node clients to malfunction. Always back up the file before making changes.</p>"},{"location":"advanced-setup/config/#location-and-editing","title":"Location and Editing","text":"<p>The configuration file is located at:</p> <p><code>/boot/firmware/config.txt</code></p> <p>You will need root privileges to edit this file. Connect via SSH and use a text editor like <code>nano</code>:</p> <pre><code># First, create a backup\nsudo cp /boot/firmware/config.txt /boot/firmware/config.txt.backup\n\n# Then, edit the file\nsudo nano /boot/firmware/config.txt\n</code></pre> <p>After saving changes, you must reboot your Raspberry Pi for them to take effect:</p> <pre><code>sudo reboot\n</code></pre>"},{"location":"advanced-setup/config/#web3-pi-specific-sections","title":"Web3 Pi Specific Sections","text":"<p>These sections control the behavior of the Web3 Pi software suite.</p>"},{"location":"advanced-setup/config/#web3pi-section","title":"[web3pi] Section","text":"<ul> <li><code>geth=true|false</code>: Enables or disables the Geth execution client service (w3p_geth).</li> <li><code>nimbus=true|false</code>: Enables or disables the Nimbus consensus client service (w3p_nimbus-beacon).</li> <li><code>lighthouse=true|false</code>: Enables or disables the Lighthouse consensus client service (w3p_lighthouse-beacon). (Note: Typically, only one consensus client should be enabled).</li> <li><code>influxdb=true|false</code>: Enables or disables the InfluxDB time-series database service (for monitoring).</li> <li><code>grafana=true|false</code>: Enables or disables the Grafana dashboard service (for monitoring).</li> <li><code>bsm=true|false</code>: Enables or disables the Basic System Monitor service.</li> <li><code>bnm=true|false</code>: Enables or disables the Basic Eth2 Node Monitor service.</li> <li><code>exec_url=http://localhost:8551</code>: Specifies the URL the consensus client uses to connect to the execution client's Engine API. The default assumes both clients are on the same machine.</li> <li><code>eth_network=mainnet|sepolia|hoodi|...</code>: Crucially, sets the target Ethereum network for all clients. Must match the network you intend to sync.</li> </ul>"},{"location":"advanced-setup/config/#client-port-sections-geth-nimbus-lighthouse","title":"Client Port Sections ([geth], [nimbus], [lighthouse]):","text":"<ul> <li><code>geth_port=30303</code>: Sets the P2P port Geth uses for peer discovery and communication.</li> <li><code>nimbus_port=9000</code>: Sets the P2P port Nimbus uses.</li> <li><code>lighthouse_port=9000</code>: Sets the P2P port Lighthouse uses.</li> </ul> <p>Make sure to update the UFW Firewall after changing these ports.</p>"},{"location":"advanced-setup/config/#standard-raspberry-pi-sections","title":"Standard Raspberry Pi Sections","text":"<p>The rest of the config.txt file contains standard Raspberry Pi configuration directives, grouped under conditional filters like [all], [pi4], [pi5], [cm4], etc. These control hardware aspects:</p> <ul> <li>Boot Options: (<code>kernel</code>, <code>cmdline</code>, <code>initramfs</code>) Defines how the Linux kernel is loaded.</li> <li>Hardware Interfaces: (<code>dtparam=audio</code>, <code>i2c_arm</code>, <code>spi</code>, <code>enable_uart</code>) Enables or disables onboard hardware like audio, I2C, SPI, and serial ports.</li> <li>Display Settings: (<code>disable_overscan</code>, <code>hdmi_drive</code>, <code>hdmi_force_hotplug</code>, <code>display_auto_detect</code>) Configures HDMI output behavior.</li> <li>Graphics: (<code>dtoverlay=vc4-kms-v3d</code>) Configures the graphics driver.</li> <li>Camera: (<code>camera_auto_detect</code>) Auto-detects connected cameras.</li> <li>USB: (<code>dtoverlay=dwc2</code>, <code>usb_max_current_enable</code>) Configures USB ports, including enabling higher current output on Pi 5.</li> <li>PCIe (Pi 5 / CM4): (<code>dtparam=pciex1</code>, <code>dtparam=pciex1_gen=3</code>) Important for NVMe drives. Enables the PCIe interface and sets its speed (Gen 2 or Gen 3). Web3 Pi typically enables Gen 3 for better NVMe performance.</li> <li>Overclocking: (Lines often starting with # over_voltage, # arm_freq) These settings (commented out by default) allow advanced users to potentially increase CPU performance. Requires active cooling and carries risks of instability or hardware damage if done improperly.</li> </ul>"},{"location":"advanced-setup/config/#further-reading","title":"Further Reading","text":"<p>For an exhaustive explanation of all standard Raspberry Pi config.txt options, refer to the official documentation:</p> <ul> <li>Official Raspberry Pi config.txt Documentation</li> </ul> <p>Remember to exercise caution when editing this file. Stick to the defaults unless you have a specific need and understand the parameter you are changing.</p>"},{"location":"advanced-setup/poe/","title":"Advanced Setup: Power over Ethernet (PoE)","text":"<p>Power over Ethernet (PoE) is a networking feature that allows network cables to carry electrical power in addition to data. By using PoE, you can power your Web3 Pi Raspberry Pi using the same Ethernet cable that provides its network connection, eliminating the need for a separate USB-C power adapter.</p> <p>This can simplify cable management and potentially allow for centralized power backup if your network switch is connected to a UPS.</p>"},{"location":"advanced-setup/poe/#benefits-of-using-poe","title":"Benefits of Using PoE","text":"<ul> <li>Simplified Wiring: Reduces cable clutter by combining power and data into a single Ethernet cable run to the Raspberry Pi.</li> <li>Flexible Placement: Allows placing the Raspberry Pi further from power outlets, as long as an Ethernet cable can reach it.</li> <li>Centralized Power Backup: If your PoE-providing network switch or injector is connected to a UPS (Uninterruptible Power Supply), your Raspberry Pi will also benefit from backup power.</li> </ul>"},{"location":"advanced-setup/ufw/","title":"Advanced Setup: Firewall Configuration (UFW)","text":""},{"location":"advanced-setup/ufw/#understanding-the-firewall","title":"Understanding the Firewall","text":"<p>Web3 Pi includes and enables UFW (Uncomplicated Firewall) by default to provide a baseline level of network security for your node. UFW is a user-friendly frontend for managing the underlying <code>iptables</code> firewall rules on Linux systems like Ubuntu.</p> <p>Its primary purpose is to control incoming and outgoing network traffic, ensuring that only necessary connections are allowed, thus reducing the potential attack surface of your device.</p>"},{"location":"advanced-setup/ufw/#default-status-and-policy","title":"Default Status and Policy","text":"<ul> <li>Enabled by Default: UFW is installed and enabled at the end of the Web3 Pi setup process.</li> <li>Default Incoming Policy: <code>DENY</code> - All incoming connections are blocked unless explicitly allowed by a specific rule.</li> <li>Default Outgoing Policy: <code>ALLOW</code> - All outgoing connections initiated by the Raspberry Pi are permitted.</li> </ul>"},{"location":"advanced-setup/ufw/#default-allowed-incoming-ports","title":"Default Allowed Incoming Ports","text":"<p>The Web3 Pi installation script configures UFW to allow incoming traffic on the specific ports required for node operation, management, and monitoring based on your configuration choices during setup. The standard ports opened are:</p> Port Protocol Service Purpose <code>22</code> TCP SSH Secure remote command-line access <code>80</code> TCP Installation Monitor / Status Page Viewing setup progress and basic status <code>3000</code> TCP Grafana Dashboard Viewing node performance and health <code>5353</code> UDP mDNS (Avahi Daemon) Hostname discovery (e.g., <code>web3pi.local</code>) <code>7197</code> TCP Basic System Monitor JSON API Programmatic access to monitoring data <code>8545</code> TCP Execution Client JSON-RPC (Geth) Wallet connections <code>8546</code> TCP Execution Client WebSocket RPC (Geth) WebSocket connections for dApps/tools <code>8551</code> TCP Execution Client Engine API (Geth) Communication between EL &amp; CL clients <code>9090</code> TCP Cockpit System Dashboard Web-based system management <code>9000</code> (default) TCP &amp; UDP Consensus Client P2P (Lighthouse/Nimbus) Peer discovery and communication <code>30303</code> (default) TCP &amp; UDP Execution Client P2P (Geth) Peer discovery and communication"},{"location":"advanced-setup/ufw/#checking-firewall-status-and-rules","title":"Checking Firewall Status and Rules","text":"<p>You can view the current UFW status and the list of active rules by connecting via SSH and running the following commands:</p> <pre><code>sudo ufw status numbered\n</code></pre>"},{"location":"advanced-setup/ufw/#adding-or-removing-ports","title":"Adding or Removing Ports","text":"<p>To add a new port, use the <code>ufw allow</code> command. For example, to allow incoming TPC traffic on port <code>12345</code>, run the following command:</p> <pre><code>sudo ufw allow 12345/tcp comment 'This port is used by XYZ service'\n</code></pre> <p>To remove a port, use the <code>ufw delete</code> command. It's recommended to use the <code>ufw status numbered</code> command to identify the rule number before deleting it. For example, to delete the rule with the number <code>100</code>, run the following command:</p> <pre><code>sudo ufw delete 100\n</code></pre>"},{"location":"advanced-setup/ups/","title":"Power Backup Solutions for Raspberry Pi 5 and Raspberry Pi 4","text":""},{"location":"advanced-setup/ups/#why-use-power-backup-for-an-ethereum-full-node","title":"Why Use Power Backup for an Ethereum Full Node?","text":"<p>Running a full Ethereum node on Raspberry Pi, especially in projects like Web3 Pi, requires consistent and stable power. A power outage or fluctuation can result in corrupted data since the node continuously writes to storage. In addition, even if you live in a region with seemingly stable electricity, brief voltage dips or surges can occur unnoticed, potentially causing instability, freezing, or unexpected reboots of your Raspberry Pi.</p> <p>For optimal reliability, power backup systems should ideally cover not just the Raspberry Pi but the entire network path (e.g., routers and switches). However, even just powering the Raspberry Pi can significantly enhance stability.</p> <p> </p>"},{"location":"advanced-setup/ups/#backup-power-options-for-raspberry-pi","title":"Backup Power Options for Raspberry Pi","text":"<p>There are two primary solutions for providing backup power to Raspberry Pi:</p> <ol> <li>Conventional 230/110V UPS</li> <li>Dedicated UPS for Raspberry Pi SBC</li> </ol>"},{"location":"advanced-setup/ups/#conventional-230110v-ups","title":"Conventional 230/110V UPS","text":""},{"location":"advanced-setup/ups/#advantages","title":"Advantages:","text":"<ul> <li>Widely available globally in various models and capacities.</li> <li>Can power multiple devices, such as routers, switches, or multiple Raspberry Pis.</li> </ul>"},{"location":"advanced-setup/ups/#disadvantages","title":"Disadvantages:","text":"<ul> <li>Larger in size and often equipped with fans, which may produce noise.</li> </ul>"},{"location":"advanced-setup/ups/#recommended-model","title":"Recommended Model:","text":"<ul> <li>Legrand UPS KEOR PDU (EAN: 3414971529380) <ul> <li>Silent operation and tested for reliability.  </li> <li>More details.</li> </ul> </li> </ul>"},{"location":"advanced-setup/ups/#dedicated-raspberry-pi-ups","title":"Dedicated Raspberry Pi UPS","text":""},{"location":"advanced-setup/ups/#advantages_1","title":"Advantages:","text":"<ul> <li>Compact and silent.</li> <li>Designed specifically for Raspberry Pi, often as a HAT or a small external device.</li> <li>Equipped with popular 18650 cells for longer battery life, depending on the number of cells.</li> <li>Can interface with Raspberry Pi to detect low battery levels and initiate safe shutdowns.</li> </ul>"},{"location":"advanced-setup/ups/#disadvantages_1","title":"Disadvantages:","text":"<ul> <li>Less commonly available but can be ordered online.</li> </ul>"},{"location":"advanced-setup/ups/#recommendations","title":"Recommendations:","text":""},{"location":"advanced-setup/ups/#for-raspberry-pi-5","title":"For Raspberry Pi 5:","text":"<ul> <li> <p>Geekworm X1200 2-Cell 18650 5.1V 5A UPS HAT </p> <ul> <li>Designed specifically for Raspberry Pi 5.  </li> <li>Features:<ul> <li>Supports two 18650 batteries for extended runtime.</li> <li>Output: 5.1V/5A for consistent power delivery.</li> <li>Compact HAT form factor, easy to install.  </li> </ul> </li> <li>More information.</li> </ul> </li> <li> <p>Waveshare UPS Module 3S </p> <ul> <li>Features:<ul> <li>Supports three 18650 batteries.</li> <li>Smart power management with low-battery alert.</li> <li>Compact external unit, easy to integrate.  </li> </ul> </li> <li>More information.</li> </ul> </li> </ul>"},{"location":"advanced-setup/ups/#for-raspberry-pi-4","title":"For Raspberry Pi 4:","text":"<ul> <li>Geekworm Raspberry Pi X728 <ul> <li>Features:<ul> <li>Supports three 18650 batteries.</li> <li>Integrated power management for safe shutdown.</li> <li>Output: 5V/6A.</li> <li>Compact design that mounts directly onto Raspberry Pi.</li> </ul> </li> <li>More information.</li> </ul> </li> </ul>"},{"location":"advanced-setup/ups/#installation-and-setup","title":"Installation and Setup","text":"<p>The installation and configuration processes for these UPS devices are detailed on their respective product pages. Refer to the manufacturer's guides for precise instructions.</p>"},{"location":"advanced-setup/ups/#recommendation","title":"Recommendation","text":"<p>We highly recommend using a power backup solution to enhance the stability of your Ethereum node and reduce potential problems caused by power interruptions.</p> <p>For Ethereum Solo Staking, power backup is critical. A reliable power supply minimizes downtime, ensures data integrity, and helps avoid penalties related to missed attestations or blocks.</p>"},{"location":"downloads/","title":"Downloads","text":""},{"location":"downloads/#web3-pi-image","title":"Web3 Pi Image","text":"<p>A comprehensive image packed with tools and references for creating and hosting Ethereum Nodes on Raspberry Pi devices. Ethereum on Raspberry Pi \u2192</p>"},{"location":"downloads/#web3-pi-imager","title":"Web3 Pi Imager","text":"<p>An intuitive application designed to streamline the process of burning Web3 Pi images effortlessly. Web3 Pi Imager \u2192</p>"},{"location":"introduction/ethereum-node/","title":"What is an Ethereum Node?","text":"<p>Before running your own Ethereum node using Web3 Pi or any other method, it's important to understand what a node is and its role in the Ethereum network.</p>"},{"location":"introduction/ethereum-node/#the-basics","title":"The Basics","text":"<p>An Ethereum node is simply a piece of software that connects to the Ethereum network. It downloads a copy of the Ethereum blockchain and follows the network's consensus rules to verify transactions and blocks. Running a node contributes to the decentralization, security, and resilience of the Ethereum network.</p> <p>For a comprehensive overview, start by reading the documentation provided by the Ethereum Foundation:</p> <ul> <li>Running an Ethereum Node Overview</li> </ul>"},{"location":"introduction/ethereum-node/#node-components-execution-and-consensus-clients","title":"Node Components: Execution and Consensus Clients","text":"<p>A modern Ethereum node consists of two main software components running together:</p> <ol> <li>Execution Client (EL): Sometimes called the Execution Engine or formerly Eth1 client, this software listens for new transactions broadcasted to the network, executes them in the Ethereum Virtual Machine (EVM), and holds the latest state and database of all Ethereum data. It handles the \"computation\" part of the network.</li> <li>Consensus Client (CL): Also known as the Beacon Node or formerly Eth2 client, this software implements the proof-of-stake consensus algorithm. It enables the network to agree on the state of the blockchain based on the validated data received from the Execution Client. It handles the \"agreement\" part of the network.</li> </ol> <p>These two clients work in tandem to keep the node synchronized with the head of the Ethereum chain and allow users to interact with the network.</p> <p>Learn more about clients and nodes:</p> <ul> <li>Nodes and Clients Documentation</li> </ul>"},{"location":"introduction/ethereum-node/#why-run-a-node","title":"Why Run a Node?","text":"<p>People run Ethereum nodes for various reasons:</p> <ul> <li>Support the Network: Increase the decentralization and security of Ethereum.</li> <li>Trustless &amp; Uncensored Access: Interact directly with the Ethereum blockchain without relying on third-party services, ensuring privacy and avoiding potential censorship or rate limits.</li> <li>High-Performance RPC: Gain fast, local, and unlimited access to the Ethereum RPC API for wallets and applications.</li> <li>Development: Provide a local endpoint for developing and testing decentralized applications (dApps).</li> <li>Foundation for Staking: Provide the necessary infrastructure (EL/CL clients) that could be configured for staking.</li> </ul> <p>It is important to clarify: running an Ethereum node does not require staking 32 ETH. Anyone can run a full node using Web3 Pi to verify transactions, interact privately with the blockchain, and contribute to network health without any ETH deposit. Staking, which does require 32 ETH per validator, is a separate activity that involves proposing and attesting to new blocks to earn rewards.</p> <p>What about staking?</p> <p>While running a node is a prerequisite for staking, configuring it specifically for staking duties is a complex process that goes beyond the standard Web3 Pi setup. You can learn more about staking here.</p>"},{"location":"introduction/next-steps/","title":"Next Steps","text":"<p>Now that you have a basic understanding of Web3 Pi and Ethereum nodes, here's how to proceed:</p>"},{"location":"introduction/next-steps/#1-make-key-decisions","title":"1. Make Key Decisions","text":"<p>Before you begin the setup process, you need to decide on a few things:</p>"},{"location":"introduction/next-steps/#single-or-dual-device-mode","title":"Single or Dual Device Mode?","text":"<p>An Ethereum node requires both an Execution Client (EL) and a Consensus Client (CL).</p> <ul> <li>Single Device: Run both EL and CL clients on one Raspberry Pi. This is cheaper but shares resources. A Raspberry Pi 5 with 8GB RAM is recommended for this configuration.</li> <li>Dual Device: Run the EL client on one Raspberry Pi and the CL client on a separate Raspberry Pi. This allows you to use two, weaker devices in place of one, more powerful one, at the cost of increased complexity.</li> </ul> <p>If you're unsure, we recommend starting with a single device setup.</p>"},{"location":"introduction/next-steps/#2-prepare-your-hardware","title":"2. Prepare Your Hardware","text":"<p>Ensure you have all the necessary hardware components (Raspberry Pi, power supply, storage, network cable, etc.).</p>"},{"location":"introduction/next-steps/#use-your-own-hardware-or-the-welcomebox","title":"Use Your Own Hardware or the WelcomeBox?","text":"<ul> <li>WelcomeBox: Web3 Pi offers a WelcomeBox \u2014 an all-in-one solution with pre-selected, compatible hardware to help you get started quickly.</li> <li>Own Hardware: You can use your existing Raspberry Pi (Model 4, 5, or CM4) and compatible peripherals. Ensure you have everything required by checking the Prerequisites Guide and the Hardware Recommendations document.</li> </ul>"},{"location":"introduction/next-steps/#optional-lcd-display","title":"Optional LCD Display?","text":"<ul> <li>You can add an optional LCD display to your setup for at-a-glance monitoring. It's included in the WelcomeBox and natively supported by the Web3 Pi system \u2014 just plug it in, no installation or configuration needed. Details are in the LCD Monitoring Guide.</li> </ul>"},{"location":"introduction/next-steps/#3-set-up-your-node","title":"3. Set Up Your Node","text":"<ul> <li>Follow the Full Setup Guide relevant to your configuration for detailed, step-by-step instructions assembling the hardware and booting your Raspberry Pi for the first time.</li> </ul>"},{"location":"introduction/next-steps/#4-manage-your-node","title":"4. Manage Your Node","text":"<p>Web3 Pi includes a set of tools to help you manage and monitor your node:</p> <ul> <li>The Grafana Dashboard provides real-time monitoring of your node's performance.</li> <li>The Cockpit Dashboard provides an overview of your node's status and allows you to manage basic settings.</li> <li>The Web3 Pi Updater allows you to upgrade your node's ethereum dependencies and other software.</li> <li>The Web3 Pi Link allows you to access your node from anywhere in the world.</li> </ul> <p>Warning</p> <p>Remember: Staking configuration is currently considered an advanced, unsupported procedure. Proceed with extreme caution if exploring this path independently.</p>"},{"location":"introduction/staking/","title":"Can I Earn with Web3 Pi?","text":"<p>Warning</p> <p>Running an Ethereum validator involves significant financial risk and technical responsibility. You do so entirely at your own risk.</p> <p>Running a standard Ethereum node with Web3 Pi does not directly generate income by itself. Its primary purpose is providing secure, private, and performant access to the blockchain. However, Web3 Pi serves as a foundation for potential earning opportunities:</p> <ul> <li>Solo Staking: While running a node doesn't require 32 ETH, staking to secure the network and earn rewards does. Web3 Pi hardware (like Raspberry Pi 5) is capable of handling staking duties (proven in tests running 200 validators), although the setup currently requires manual configuration. We aim to simplify this process significantly in the future.</li> <li>RPC Monetization: Through collaborations like the one with Golem Network, there are plans to allow Web3 Pi node operators to share RPC endpoint and potentially earn rewards (e.g., in GLM tokens) for serving requests. This feature is not yet available.</li> </ul> <p>If you are considering staking, it is crucial that you thoroughly research and understand the process, responsibilities, and significant risks involved before attempting it.</p> <p>Learn more about staking fundamentals: - Ethereum Staking Guide</p>"},{"location":"introduction/web3-pi-project/","title":"Web3 Pi: Before you start","text":""},{"location":"introduction/web3-pi-project/#the-web3-pi-project","title":"The Web3 Pi Project","text":"<p>Web3 Pi is an open-source project simplifying the operation of a personal Ethereum node using Raspberry Pi devices. We provide a ready-to-use, optimized operating system image and automated tools, making node ownership accessible even without deep technical knowledge. Leveraging the Raspberry Pi's efficient ARM architecture, Web3 Pi ensures reliable blockchain access with very low energy consumption (around 8W), allowing for cost-effective, 24/7 operation. Our goal is to lower the barrier to entry for direct participation in the Ethereum network.</p> <p>Currently supported devices (at least 8GB RAM required):</p> <ul> <li>Raspberry Pi 5</li> <li>Raspberry Pi 4</li> <li>Raspberry Pi CM4/CM5</li> </ul>"},{"location":"introduction/web3-pi-project/#why-web3-pi","title":"Why Web3 Pi?","text":"<p>Web3 Pi images offer several advantages for setting up your Ethereum node:</p> <ul> <li>Plug &amp; Play: Simply flash the image to your storage and power up the Raspberry Pi.</li> <li>Solid Foundation: Based on Ubuntu 24.04 LTS for ARM64, providing long-term support.</li> <li>Automated Setup: Handles initial configuration for network, user accounts, etc.</li> <li>Disk Management: Automatically partitions and formats attached storage.</li> <li>Auto-Sync: Automatically starts the Ethereum sync process.</li> <li>Easy Updates: Includes an APT repository for straightforward installation and upgrades.</li> <li>Monitoring Included: Comes with pre-configured monitoring dashboards.</li> <li>Security Focused: Includes the UFW firewall configured for basic security.</li> </ul>"},{"location":"introduction/web3-pi-project/#why-raspberry-pi","title":"Why Raspberry Pi?","text":"<p>Raspberry Pi devices are an excellent platform for running an Ethereum node (Full or Archive) due to several key factors:</p> <ul> <li>Affordable: Set up a Full Ethereum node (EL/CL) for under $350.</li> <li>Efficient: As a dedicated device, resources are focused solely on running the node.</li> <li>Low Power Consumption: Typically consumes around 8W.</li> <li>Small Form Factor: Its compact size makes it easy to place anywhere in your home.</li> <li>Ideal for 24/7 Operation: The combination of low cost, low power, and small size makes it perfect for continuous operation.</li> </ul> <p>What now?</p> <ul> <li>Learn what exactly is an Ethereum node and how it works (next step).</li> <li>Get started with running your own Ethereum node on a Raspberry Pi.</li> </ul>"},{"location":"management/","title":"Managing Your Node","text":"<p>Once your Web3 Pi node is up and running, you'll occasionally need to interact with it for monitoring, updates, or configuration changes. There are two primary ways to manage the underlying system:</p> <ol> <li> <p>SSH (Secure Shell):     Provides direct command-line access to the Ubuntu operating system. This is the most powerful method, suitable for advanced configuration, troubleshooting, and running specific commands.</p> </li> <li> <p>Cockpit Web Interface:     Offers a user-friendly, web-based dashboard for monitoring system resources (CPU, RAM, disk), viewing logs, and performing basic administrative tasks directly from your browser.</p> </li> </ol> <p>Choose the tool that best suits the task at hand. For routine checks and system overview, Cockpit is often sufficient. For more advanced tasks, SSH is the way to go.</p>"},{"location":"management/ssh/","title":"Connecting via SSH","text":""},{"location":"management/ssh/#what-is-ssh","title":"What is SSH?","text":"<p>SSH stands for Secure Shell. It is a network protocol that allows you to securely access the command-line interface (also known as the terminal or shell) of a remote computer over an unsecured network. All communication between your computer and the Raspberry Pi via SSH is encrypted.</p>"},{"location":"management/ssh/#why-use-ssh-with-web3-pi","title":"Why Use SSH with Web3 Pi?","text":"<p>While Cockpit provides a web-based graphical interface for basic system administration, SSH gives you direct, powerful command-line access to your Web3 Pi's underlying Ubuntu operating system.</p>"},{"location":"management/ssh/#how-to-connect-via-ssh","title":"How to Connect via SSH","text":"<p>Before connecting, you will need:</p> <ol> <li>An SSH Client: This depends on your operating system (see tabs below).</li> <li>Your Web3 Pi's IP Address or Hostname:<ul> <li>How to find your node's IP address or hostname</li> </ul> </li> </ol> <p>Now, follow the steps for your specific operating system:</p> macOS / Linux / Windows TerminalWindows (PuTTY) <ol> <li>Open your SSH Client:<ul> <li>On macOS or Linux, open the Terminal application.</li> <li>On Windows 10/11, open PowerShell or Command Prompt. The <code>ssh</code> client is typically built-in.</li> </ul> </li> <li>Initiate the Connection:<ul> <li>Type the following command, replacing <code>&lt;your-pi-address&gt;</code> with your Pi's actual IP address or hostname:     <pre><code>ssh ethereum@&lt;your-pi-address&gt;\n</code></pre> Example using hostname: <code>ssh ethereum@eop-1.local</code> Example using IP: <code>ssh ethereum@192.168.1.123</code></li> <li>Press Enter.</li> </ul> </li> <li>Accept the Host Key (First Connection):<ul> <li>The very first time you connect from your computer to the Web3 Pi, your SSH client will show a security alert asking you to verify the host's key fingerprint:     <pre><code>The authenticity of host 'eop-1.local (192.168.1.123)' can't be established.\nED25519 key fingerprint is SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\n</code></pre></li> <li>This is normal. Type <code>yes</code> and press Enter to continue and store the key.</li> </ul> </li> <li>Enter the Password:<ul> <li>You will be prompted for the password for the <code>ethereum</code> user:     <pre><code>ethereum@&lt;your-pi-address&gt;'s password:\n</code></pre></li> <li>Default Username: <code>ethereum</code></li> <li>Default Password: <code>ethereum</code></li> <li>(Security Note: When typing the password, you won't see any characters or dots appear. This is expected. Type the password carefully and press Enter.)</li> </ul> </li> <li>Change the Password (Mandatory First Login):<ul> <li>If this is the first time you are logging in with the default <code>ethereum</code> password, the system will force you to change it immediately:     <pre><code>WARNING: Your password has expired.\nYou must change your password now and login again!\nChanging password for ethereum.\n(Current) UNIX password:\n</code></pre></li> <li>Enter the current password (<code>ethereum</code>) and press Enter.</li> <li>Then, you will be prompted to enter a New password: Type your chosen strong, unique password and press Enter.</li> <li>You will be asked to Retype new password: Type the same new password again and press Enter.</li> <li>Choose a strong password! This is crucial for security.</li> </ul> </li> <li>Login Successful:<ul> <li>After changing the password (on first login) or entering the correct password (on subsequent logins), you will be logged in and see the Web3 Pi command prompt:     <pre><code>ethereum@&lt;your-pi-address&gt;:~$\n</code></pre></li> </ul> </li> </ol> <ol> <li>Open PuTTY:<ul> <li>Download and launch the PuTTY application.</li> </ul> </li> <li>Configure the Session:<ul> <li>In the \"Session\" category (the default view):</li> <li>Enter your Pi's IP address or hostname in the \"Host Name (or IP address)\" field.</li> <li>Ensure \"Port\" is set to <code>22</code>.</li> <li>Ensure \"Connection type\" is set to <code>SSH</code>.</li> <li>Click the \"Open\" button.</li> </ul> </li> <li>Accept the Host Key (First Connection):<ul> <li>The very first time you connect, a \"PuTTY Security Alert\" window will appear, showing the server's host key fingerprint.</li> <li>This is normal. Verify the key if desired, then click \"Accept\" (or \"Yes\") to trust the key and continue.</li> </ul> </li> <li>Enter the Username and Password:<ul> <li>A terminal window will open, prompting <code>login as:</code>. Type <code>ethereum</code> and press Enter.</li> <li>Next, it will prompt <code>ethereum@&lt;your-pi-address&gt;'s password:</code>.</li> <li>Default Password: <code>ethereum</code></li> <li>(Security Note: When typing the password, you won't see any characters. Type carefully and press Enter.)</li> </ul> </li> <li>Change the Password (Mandatory First Login):<ul> <li>If this is the first time you are logging in with the default <code>ethereum</code> password, the system will force you to change it immediately after entering the default password:     <pre><code>WARNING: Your password has expired.\nYou must change your password now and login again!\nChanging password for ethereum.\n(Current) UNIX password:\n</code></pre></li> <li>Enter the current password (<code>ethereum</code>) and press Enter.</li> <li>Then, you will be prompted to enter a New password: Type your chosen strong, unique password and press Enter.</li> <li>You will be asked to Retype new password: Type the same new password again and press Enter.</li> <li>Choose a strong password! This is crucial for security.</li> </ul> </li> <li>Login Successful:<ul> <li>After changing the password (on first login) or entering the correct password (on subsequent logins), you will be logged in and see the Web3 Pi command prompt:     <pre><code>ethereum@&lt;your-pi-address&gt;:~$\n</code></pre></li> </ul> </li> </ol>"},{"location":"management/cockpit/dashboard/","title":"Cockpit Dashboard","text":""},{"location":"management/cockpit/dashboard/#what-is-cockpit","title":"What is Cockpit?","text":"<p>Web3 Pi comes with Cockpit pre-installed. Cockpit is a free, open-source, web-based graphical interface for servers and Linux systems. It allows you to monitor and administer your Raspberry Pi's underlying operating system (Ubuntu) directly from your web browser.</p> <p>Think of it as a user-friendly dashboard for managing the system itself.</p>"},{"location":"management/cockpit/dashboard/#what-can-you-do-with-cockpit-on-web3-pi","title":"What Can You Do with Cockpit on Web3 Pi?","text":"<p>While Grafana dashboards focus specifically on monitoring your Ethereum node clients (EL/CL), Cockpit focuses on the operating system level. Common uses include:</p> <ul> <li>Checking CPU, RAM, and network usage trends.</li> <li>Viewing available disk space on your system drive and attached USB drive.</li> <li>Inspecting system logs (<code>journald</code>).</li> <li>Checking the status of system services (be cautious about stopping essential services!).</li> <li>Viewing network interface configurations.</li> </ul>"},{"location":"management/cockpit/dashboard/#how-to-access-cockpit","title":"How to Access Cockpit","text":"<ol> <li>Find the IP address or hostname of your Raspberry Pi.<ul> <li>How to find your node's IP address or hostname</li> </ul> </li> <li>Navigate to <code>http://&lt;your-pi-ip-address&gt;:9090</code> (replace <code>&lt;your-pi-ip-address&gt;</code> with the actual IP address or hostname).</li> <li>You may see a security warning because Cockpit uses a self-signed SSL certificate by default. It's safe to proceed (usually under an \"Advanced\" or \"Proceed anyway\" option).</li> <li>Log in using the username <code>ethereum</code> and password you selected. If this is your first time accessing your Web3 Pi, use the default password. You will be required to change the password upon first login.</li> </ol> <p>Note</p> <p>The default password is <code>ethereum</code>. Change it as soon as possible to prevent unauthorized access.</p> <p>Now you can explore the Cockpit interface and monitor your Web3 Pi's system health!</p>"},{"location":"management/cockpit/dashboard/#official-web3-pi-plugins","title":"Official Web3 Pi Plugins","text":"<p>The Web3 Pi project maintains a number of official plugins for Cockpit.</p> <ul> <li>Web3 Pi Updater - Manages Web3 Pi and Ethereum packages.</li> <li>Web3 Pi Link - Allows you to expose your Ethereum node (and more) to the internet.</li> <li>Script Runner - Allows you to run pre-installed scripts on your Web3 Pi.</li> <li>Basic Ethereum Node Monitor - Monitors your Ethereum node (EL/CL) and pushes data to InfluxDB.</li> <li>Basic System Monitor - Exposes a simple HTTP API for monitoring your Web3 Pi.</li> <li>LCD Dashboard - Adds an LCD display to your Web3 Pi.</li> <li>Installation Status - Provides a comprehensive overview of your Web3 Pi installation.</li> </ul>"},{"location":"management/cockpit/web3-pi-link/","title":"Web3 Pi Link","text":"<p>Web3 Pi Link is a Cockpit plugin enabling secure exposure of Raspberry Pi services to the internet. It functions as a reverse proxy tunnel, eliminating the need for manual port forwarding. This document provides technical details for developers using Web3 Pi Link.</p>"},{"location":"management/cockpit/web3-pi-link/#core-functionality","title":"Core Functionality","text":"<p>Web3 Pi Link establishes a persistent, encrypted tunnel between your Raspberry Pi and a Web3 Pi managed server. This tunnel allows external access to services running on your Pi without direct exposure or complex network configuration. The plugin manages the tunnel lifecycle and provides a simplified configuration interface within Cockpit.</p>"},{"location":"management/cockpit/web3-pi-link/#key-features","title":"Key Features","text":"<ul> <li>HTTP/WebSocket Proxy: Supports forwarding HTTP and WebSocket traffic from the Raspberry Pi to a public-facing address. Note: Other protocols like SSH are currently not supported.</li> <li>Automatic HTTPS: All tunnels are automatically secured with HTTPS, even if the service on the Raspberry Pi uses HTTP internally.</li> <li>Automatic Reconnection: The plugin automatically re-establishes the tunnel in case of network interruptions.</li> <li>Cockpit Integration: Configuration is managed entirely through the Cockpit web interface.</li> <li>Subdomain Routing: Each service is assigned a unique subdomain (<code>yourname.web3pi.link</code>) for easy access.</li> </ul>"},{"location":"management/cockpit/web3-pi-link/#technical-architecture","title":"Technical Architecture","text":"<p>The plugin creates a reverse proxy tunnel. When a request arrives at <code>yourname.web3pi.link</code>, it's routed through the Web3 Pi infrastructure, through the secure tunnel to the specified port on your Raspberry Pi. The tunnel client, running on the Raspberry Pi, establishes an outbound connection to the Web3 Pi servers, so there is no need to open any specific ports on your Pi.</p>"},{"location":"management/cockpit/web3-pi-link/#installation-and-configuration","title":"Installation and Configuration","text":""},{"location":"management/cockpit/web3-pi-link/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Raspberry Pi with Web3 Pi installed and operational.</li> <li>Cockpit web interface access.</li> <li>Network connectivity allowing outbound connections. Note: No specific firewall rules are required as the connection is initiated from the Raspberry Pi.</li> </ul>"},{"location":"management/cockpit/web3-pi-link/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Install via Cockpit: Access the Cockpit web interface and navigate to the \"Web3 Pi Updater\" section. Search for \"Web3 Pi Link\" and install the plugin. Make sure to refresh the page after the installation is complete. Newer Web3 Pi versions may have this plugin already installed by default.</p> <p></p> </li> <li> <p>Configuration: The Web3 Pi Link plugin will appear in the Cockpit navigation.</p> <ul> <li>Local Port: Specify the TCP port on your Raspberry Pi that you want to expose (e.g., <code>3000</code>, <code>8545</code>, <code>9090</code>). This is the port your HTTP service is listening on.</li> <li>Subdomain: Choose a unique subdomain name. This will be used to construct the public-facing URL (<code>yourname.web3pi.link</code>). The subdomain must be globally unique. A valid subdomain must begin with a letter or number and can contain lowercase letters, numbers, and hyphens.</li> </ul> </li> </ol> <p></p>"},{"location":"management/cockpit/web3-pi-link/#troubleshooting-and-debugging","title":"Troubleshooting and Debugging","text":"<ul> <li>Verify Service Status: Check that the Web3 Pi Link service is enabled and running. You can do this by navigating to the \"Services\" section in the Cockpit interface and searching for \"web3-pi-link\".</li> <li>Network Connectivity: Ensure the Raspberry Pi has outbound internet access.</li> <li>HTTPS Issues: While Web3 Pi Link automatically provides HTTPS, ensure your application handles redirects correctly if it expects HTTPS.</li> </ul>"},{"location":"management/cockpit/web3-pi-link/#security-considerations","title":"Security Considerations","text":"<ul> <li>Secure Your Application: Web3 Pi Link provides a secure tunnel with automatic HTTPS, but it's crucial to secure your application. Implement proper authentication, authorization, and input validation to prevent vulnerabilities.</li> <li>Regular Updates: Make sure to always keep your Web3 Pi software up to date with the latest security patches. You can download the latest updates to each plugin from the \"Web3 Pi Updater\" section in the Cockpit interface.</li> <li>Monitor Logs: Regularly monitor application logs for suspicious activity.</li> </ul>"},{"location":"management/cockpit/web3-pi-link/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"},{"location":"management/cockpit/web3-pi-script-runner/","title":"Script Runner","text":"<p>Script Runner is a Cockpit plugin that provides a user-friendly interface for executing pre-installed scripts on your Web3 Pi. This allows for easy access to common utilities and diagnostic tools directly from the Cockpit web interface.</p>"},{"location":"management/cockpit/web3-pi-script-runner/#installation","title":"Installation","text":"<p>The Script Runner plugin is installed via the \"Web3 Pi Updater\" section in the Cockpit interface. Search for \"Script Runner\" and install the plugin. Make sure to refresh the page after the installation is complete. On newer Web3 Pi releases, this plugin might be pre-installed by default.</p>"},{"location":"management/cockpit/web3-pi-script-runner/#usage","title":"Usage","text":"<p>The Script Runner plugin is located in the Cockpit navigation menu. Upon opening, you will see a list of available scripts.</p> <p></p>"},{"location":"management/cockpit/web3-pi-script-runner/#running-a-script","title":"Running a Script","text":"<ol> <li>Select a Script: Click on the desired script from the list.</li> <li>View Script (Optional): Click on the \"Read File Contents\" button to inspect the script's contents.</li> <li>Run Script: Click the \"Run\" button to execute the script.</li> <li>View Output: The script's output will be displayed in a terminal window within the plugin.</li> </ol>"},{"location":"management/cockpit/web3-pi-script-runner/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Script Execution Errors: Check the script's output for error messages.</li> <li>Missing Scripts: If a script is missing, ensure your Web3 Pi installation is up-to-date. Navigate to the \"Web3 Pi Updater\" section in the Cockpit interface and search for \"Script Runner\".</li> </ul>"},{"location":"management/cockpit/web3-pi-script-runner/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"},{"location":"management/cockpit/web3-pi-updater/","title":"Web3 Pi Updater","text":"<p>The Web3 Pi Updater plugin provides a centralized interface for managing Web3 Pi packages and essential Ethereum node dependencies. This tool allows you to easily list, update, and install software directly from the Cockpit web interface.</p>"},{"location":"management/cockpit/web3-pi-updater/#usage","title":"Usage","text":"<p>The Web3 Pi Updater plugin is located in the Cockpit navigation menu.</p> <p></p>"},{"location":"management/cockpit/web3-pi-updater/#packages-list","title":"Packages List","text":"<p>Packages are separated into two categories: Web3 Pi Official Packages and Ethereum Packages. The former are maintained by the Web3 Pi team and provide additional functionality for your device, while the latter are maintained by their respective developers and are essential for running a node.</p> <p></p>"},{"location":"management/cockpit/web3-pi-updater/#refresh-packages-list","title":"Refresh Packages List","text":"<p>Web3 Pi packages are distributed from our apt repository. To ensure that your device is up to date with the latest packages, click the Refresh packages list button. This will update the list of available packages and give you the option to install or update them.</p> <p></p> <p>Note</p> <p>The Refresh packages list button has the same effect as running <code>sudo apt update</code> on the command line.</p>"},{"location":"management/cockpit/web3-pi-updater/#install-or-update-packages","title":"Install or Update Packages","text":"<p>To install a package, click the Install button next to the package name.</p> <p>To update an existing package, click the Update button next to the package name.</p> <p>Note</p> <p>After installing a new cockpit plugin, you may need to refresh your browser tab to see the new plugin in the navigation menu.</p>"},{"location":"management/cockpit/web3-pi-updater/#notes","title":"Notes","text":"<ul> <li>Package installations and updates may require administrative privileges.</li> <li>Ensure your Web3 Pi has a stable internet connection during package operations.</li> <li>Regularly check for updates to maintain optimal performance and security.</li> </ul>"},{"location":"management/cockpit/web3-pi-updater/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"},{"location":"monitoring/","title":"Monitoring Your Node","text":"<p>Keeping an eye on your Ethereum node is crucial for ensuring it runs smoothly, stays synced, and uses resources efficiently. Web3 Pi includes several built-in tools to help you monitor different aspects of your setup:</p> <ol> <li> <p>Installation Monitor:     A simple web page exposed by your Pi that displays information about the system's setup status. While always available, it's most useful during the initial installation to track the progress of automated steps in real-time.</p> </li> <li> <p>Grafana Dashboards:     Provides detailed, graphical dashboards visualizing the performance and status of your Ethereum clients. Ideal for in-depth performance monitoring once the node is running.</p> </li> <li> <p>LCD Display:     If you've installed the optional LCD hardware, this small screen provides an at-a-glance view of key system information like IP address, hostname, CPU usage, and memory, directly on the device.</p> </li> <li> <p>HTTP API:     Offers a programmatic way to query node status and metrics. Useful for integration with custom scripts or external monitoring systems.</p> </li> </ol> <p>Refer to the specific pages linked above for details on how to access and use each monitoring tool.</p>"},{"location":"monitoring/grafana/","title":"Basic Ethereum Node Monitor","text":"<p>The Basic Ethereum Node Monitor plugin is responsible for monitoring the health and status of your Ethereum node. That data is then pushed to the InfluxDB database, which can be visualized in Grafana.</p>"},{"location":"monitoring/grafana/#installation","title":"Installation","text":"<p>To install the Basic Ethereum Node Monitor plugin, navigate to the \"Web3 Pi Updater\" section in the Cockpit interface. Search for \"Basic Ethereum Node Monitor\" and install the plugin. On newer Web3 Pi releases, this plugin might be pre-installed by default.</p>"},{"location":"monitoring/grafana/#usage","title":"Usage","text":"<p>Once installed, the Basic Ethereum Node Monitor plugin will start automatically. Open Grafana in your web browser (port 3000 by default) to view the collected data. The default username is 'admin', and the password is 'admin'. It is highly recommended to change the password after the first login.</p> <p></p>"},{"location":"monitoring/grafana/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"},{"location":"monitoring/installation-monitor/","title":"Installation Status Page","text":"<p>The Installation Status plugin provides a comprehensive overview of the Web3 Pi installation process. It displays the status of each installation stage as well as any errors or warnings encountered during the process.</p>"},{"location":"monitoring/installation-monitor/#installation","title":"Installation","text":"<p>To install the Installation Status plugin, navigate to the \"Web3 Pi Updater\" section in the Cockpit interface. Search for \"Installation Status\" and install the plugin. On newer Web3 Pi releases, this plugin might be pre-installed by default.</p>"},{"location":"monitoring/installation-monitor/#usage","title":"Usage","text":"<p>Once installed, the Installation Status plugin will be accessible on port 80 of your Raspberry Pi. Simply open the URL in your web browser to view the status page.</p>"},{"location":"monitoring/installation-monitor/#disabling-the-plugin","title":"Disabling the Plugin","text":"<p>If you no longer require the Installation Status plugin, you can disable it by stopping the <code>w3p_installation-status</code> service. To do this, navigate to the \"Services\" section in the Cockpit interface and stop the service.</p>"},{"location":"monitoring/installation-monitor/#source-code","title":"Source Code","text":"<p>The source code for the Installation Status plugin can be found on GitHub.</p>"},{"location":"monitoring/installation-monitor/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"},{"location":"monitoring/lcd/","title":"LCD Dashboard","text":"<p>To add an LCD dashboard to your Raspberry Pi, you will need:</p> <ul> <li> <p>A dashboard cover for mounting;</p> </li> <li> <p>A suitable LCD display;</p> </li> <li> <p>Software to run the LCD.</p> </li> </ul>"},{"location":"monitoring/lcd/#dashboard-cover","title":"Dashboard Cover","text":"<p>The Web3 Pi LCD Dashboard project offers a suitable cover available for 3D printing.</p> <p>This is designed for installation of a colorful LCD in the Argon Neo 5 enclosure. We have designed our own 3D model of the enclosure cover with a space for the display. The assembly is simple, using snap-fits, with no tools required. The models are open-source, so anyone can print them on a 3D printer. The source code is also open-source, allowing users to add new functionalities, customize it to their needs, or add support for new displays.</p> <p>For more information, see Web 3 Pi Dashboard documentation.</p>"},{"location":"monitoring/lcd/#lcd-display","title":"LCD Display","text":"<p>The LCD display should be 1.69\" with ST7789V2 Driver. Suitable models are:</p> <ul> <li> <p>Waveshare 24382 -\u00a0See product page</p> </li> <li> <p>Seeed Studio 104990802 -\u00a0See product page</p> </li> </ul>"},{"location":"monitoring/lcd/#software","title":"Software","text":"<p>The software is included in the Web3 Pi image, and can also be downloaded separately from the Web 3 Pi Dashboard Project.</p>"},{"location":"monitoring/system-monitor/","title":"Basic System Monitor (monitoring via HTTP API)","text":"<p>The Basic System Monitor plugin is responsible for monitoring the health and status of your Web3 Pi. It exposes a simple HTTP API that can be queried to retrieve information about your device.</p>"},{"location":"monitoring/system-monitor/#installation","title":"Installation","text":"<p>To install the Basic System Monitor plugin, navigate to the \"Web3 Pi Updater\" section in the Cockpit interface. Search for \"Basic System Monitor\" and install the plugin. On newer Web3 Pi releases, this plugin might be pre-installed by default.</p>"},{"location":"monitoring/system-monitor/#usage","title":"Usage","text":"<p>Once installed, the Basic System Monitor plugin will start automatically. You can query the status of your Web3 Pi by calling the HTTP API endpoint on port 7197 (by default).</p> <p>The output should look similar to this:</p> <pre><code>{\n  \"host_name\": \"eop-1\",\n  \"num_cores\": 4,\n  \"cpu_percent\": 30,\n  \"mem_total\": 8323276800,\n  \"mem_used\": 6859583488,\n  \"mem_free\": 386887680,\n  \"mem_percent\": 85.4,\n  \"swap_total\": 17179865088,\n  \"swap_used\": 7224090624,\n  \"swap_free\": 9955774464,\n  \"swap_percent\": 42,\n  \"disk_used\": 1359481831424,\n  \"cpu_temp\": 58.95,\n  \"net_upload\": 510982.969251317,\n  \"net_download\": 702530.988724869\n}\n</code></pre>"},{"location":"monitoring/system-monitor/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"},{"location":"setup/next-steps/","title":"Post-Installation: Next Steps","text":"<p>Congratulations! You've successfully assembled your hardware, flashed the Web3 Pi image, and completed the initial automated setup process. Your Ethereum node(s) should now be running and synchronizing with the network.</p> <p>Here\u2019s what to do next to manage, monitor, and utilize your new node:</p>"},{"location":"setup/next-steps/#1-verify-synchronization-status","title":"1. Verify Synchronization Status","text":"<p>The most crucial step after installation is blockchain synchronization. This process can take many hours, sometimes even days, depending on your hardware, network speed, and the chosen Ethereum network (Mainnet takes the longest).</p> <ul> <li>Check Grafana: The primary way to monitor sync progress is through the Grafana dashboard.</li> </ul>"},{"location":"setup/next-steps/#2-access-your-nodes","title":"2. Access Your Node(s)","text":"<p>You have several ways to interact with the underlying system(s):</p> <ul> <li> <p>SSH (Command Line): For direct terminal access, advanced configuration, and troubleshooting.   </p> <ul> <li>Guide: Connecting via SSH</li> <li>Default Credentials: Username <code>ethereum</code>, Password <code>ethereum</code></li> <li>Action Required: You must change this password on your first SSH login.</li> </ul> </li> <li> <p>Cockpit (Web Interface): For a graphical overview of system resources, logs, services, and basic management tasks.   </p> <ul> <li>Guide: Cockpit Dashboard</li> <li>Access: <code>http://&lt;your-pi-hostname-or-ip&gt;:9090</code></li> <li>Login: Use the <code>ethereum</code> username and the password you set via SSH (or the default <code>ethereum</code> if you haven't logged in via SSH yet).</li> </ul> </li> </ul> <p>Dual-Mode Access</p> <p>If you set up a dual-device node, remember that you have two separate systems. You need to use the specific hostname for each device when connecting via SSH or Cockpit (e.g., <code>ssh ethereum@eop-1-exec.local</code> and <code>ssh ethereum@eop-1-cons.local</code>).</p>"},{"location":"setup/next-steps/#3-explore-monitoring-tools","title":"3. Explore Monitoring Tools","text":"<p>Beyond checking sync status, familiarize yourself with the monitoring tools:</p> <ul> <li>Grafana Dashboards: Detailed performance graphs for EL/CL clients, system resources.</li> <li>Cockpit Dashboard: System-level monitoring (CPU, RAM, Disk, Network).</li> <li>LCD Display: (Optional Hardware) At-a-glance status directly on the device.</li> <li>HTTP API: Programmatic access to system metrics.</li> </ul>"},{"location":"setup/next-steps/#4-learn-about-management-tools","title":"4. Learn About Management Tools","text":"<p>Web3 Pi includes tools within Cockpit to help manage your node:</p> <ul> <li>Web3 Pi Updater: Keep your Ethereum clients and Web3 Pi components up-to-date. Check this periodically.</li> <li>Web3 Pi Link: Securely expose services (like your node's RPC endpoint) to the internet without complex firewall rules.</li> <li>Script Runner: Execute useful pre-installed utility and diagnostic scripts.</li> </ul>"},{"location":"setup/next-steps/#5-utilize-your-node","title":"5. Utilize Your Node","text":"<p>Now that your node is running, you can start using it:</p> <ul> <li>Connect Your Wallet: Point wallets like MetaMask to your own node's RPC endpoint (<code>http://&lt;your-pi-hostname-or-ip&gt;:8545</code>) for enhanced privacy and reliability. Use Web3 Pi Link for access outside your home network.</li> <li>Transaction Firewall: Add an extra layer of security by manually approving transactions initiated from your wallet.</li> <li>Development: Use the local RPC endpoint for developing and testing decentralized applications (dApps).</li> <li>Staking (Advanced/Unsupported): While Web3 Pi provides the foundation, configuring for staking is complex and high-risk. Read the Staking Considerations carefully before proceeding independently.</li> </ul>"},{"location":"setup/next-steps/#6-bookmark-support-resources","title":"6. Bookmark Support Resources","text":"<p>Keep these pages handy for future reference:</p> <ul> <li>Cheatsheet: Quick reference for commands, ports, and file locations.</li> <li>Troubleshooting: Guidance for common issues (needs expansion!).</li> <li>Contact: How to reach the Web3 Pi community (Discord, GitHub).</li> </ul>"},{"location":"setup/next-steps/#7-consider-advanced-setup-optional","title":"7. Consider Advanced Setup (Optional)","text":"<p>Explore options to enhance reliability and performance:</p> <ul> <li>Backup Power (UPS): Protect against power outages and data corruption.</li> <li>Firewall Configuration (UFW): Understand and customize network security rules.</li> <li>Overclocking: Potentially increase performance (requires caution and cooling).</li> </ul> <p>You've taken a significant step towards supporting the Ethereum network and gaining more control over your web3 experience. Keep exploring the documentation, join the community if you have questions, and enjoy running your own node!</p>"},{"location":"setup/prerequisites/","title":"Web3 Pi: Prerequisites","text":""},{"location":"setup/prerequisites/#internet-requirements","title":"Internet Requirements","text":"<ul> <li>Speed:  A download speed of at least 160 Mb/s (20 MB/s) is required, with 240+ Mb/s (30+ MB/s) recommended for optimal synchronization performance (allowing sync completion in under 24 hours on a Raspberry Pi 5). Slower connections will still work but will result in significantly longer synchronization times. Upload speed requirements are much lower.</li> <li>Stability: A stable, low-latency (ping) connection is important for reliable node operation.</li> <li>Data: Initial synchronization requires downloading approximately 1.4 TB (May 2025) of data from the Ethereum network. An unmetered internet connection is essential to avoid unexpected charges. Do not use connections with data caps.</li> </ul>"},{"location":"setup/prerequisites/#lan-requirements","title":"Lan Requirements","text":"<p>You'll need a gigabit LAN, including a gigabit network switch and Ethernet cables rated Cat5e or higher. The network must support automatic DHCP configuration and have internet access.</p>"},{"location":"setup/prerequisites/#wifi-connection","title":"Wifi Connection","text":"<p>The default and recommended method for connecting the Raspberry Pi in the Web3 Pi project is via a wired Ethernet connection with automatic DHCP configuration.</p> <p>However, you can also connect Raspberry Pi 4/5 to the internet using the built-in WiFi module. You'd need to provide the SSID and password for your WiFi network during setup. This is documented in the setup guide.</p> <p>Although using WiFi is possible, we strongly recommend using a wired connection. Over time, WiFi may lead to issues with connection stability and bandwidth performance.</p> <p>Note: If you're using WiFi, do not connect the Ethernet cable.</p>"},{"location":"setup/prerequisites/#uninterruptible-power-supply-ups","title":"Uninterruptible Power Supply (UPS)","text":"<p>We strongly recommend connecting your Web3 Pi device and essential networking equipment (such as a router/modem/switch) to an uninterruptible power supply (UPS). A UPS protects against voltage fluctuations and short power outages, which are common causes of node downtime, potential disk data corruption, and may lead to penalties for validator inactivity (in Solo Staking setups).</p> <p>See UPS Recommendations</p>"},{"location":"setup/prerequisites/#hardware-requirements","title":"Hardware Requirements","text":"<p>The Easiest Start: The Web3 Pi WelcomeBox For those who prefer a guaranteed-compatible, all-in-one solution, the Web3 Pi WelcomeBox is the recommended starting point.  This kit contains all the hardware you need to run a single node.</p> <p>If you would prefer to use your own existing Raspberry Pi, please read the Hardware Checklist to make sure you have everything you need. If you need to purchase anything further, the Hardware Recommendations document will help you choose suitable additions to your existing setup.</p> <p>Optionally, you can also purchase an LCD screen for the Pi. This gives you a quick way of checking that your node is functional. The LCD screen is included in the WelcomeBox.</p>"},{"location":"setup/supported-configurations/","title":"Supported Configurations","text":"<p>Web3 Pi provides a custom image file that contains all the software needed to run a full Ethereum node on Raspberry Pi single-board computers.</p> <ul> <li>Execution client</li> <li>Consensus client</li> <li>Monitoring tools</li> </ul>"},{"location":"setup/supported-configurations/#available-configurations","title":"Available Configurations","text":"<p>The Web3 Pi node can be deployed in either a single-device or on dual-devices.</p>"},{"location":"setup/supported-configurations/#single-device-mode","title":"Single-Device Mode","text":"<p>Single device mode is the simplest configuration. For optimal performance, it is recommended to use a Raspberry Pi 5.</p> <p>Single Mode - Hardware Checklist</p>"},{"location":"setup/supported-configurations/#dual-devices-mode","title":"Dual-Devices Mode","text":"<p>Dual-devices mode requires additional configuration, but a single device may start running low on resources for a Raspberry Pi 4. In dual-devices mode, one Raspberry Pi acts as the consensus client and the other as the execution client. The solution maintains performance and stability by splitting tasks across two devices.</p> <p>The following combinations are supported:</p> <ul> <li>Two Raspberry Pi 5</li> <li>Two Raspberry Pi 4</li> <li>One Raspberry Pi 5 and one Raspberry Pi 4</li> <li>Any combination including Compute Module 4 (CM4)</li> </ul> <p>Dual-Devices - Hardware Checklist</p>"},{"location":"setup/dual-mode/hardware-assembly/","title":"Web3 Pi: Hardware Assembly (Dual-Device Mode)","text":"<p>Assembling the hardware for a dual-device Web3 Pi node involves building two separate Raspberry Pi systems: one designated as the Execution Layer (EL) Node and the other as the Consensus Layer (CL) Node.</p> <p>While the assembly steps for each individual device are identical to the Single-Device Hardware Assembly Guide, managing two builds requires careful attention, especially regarding component placement (SSDs) and labeling.</p> <p>Follow Instructions Carefully</p> <p>Read through these instructions and the single-device guide before starting. Ensure you have all components for both devices laid out and organized.</p>"},{"location":"setup/dual-mode/hardware-assembly/#before-you-start","title":"Before You Start","text":"<ol> <li>Gather Components: Ensure you have all the necessary hardware components for two complete Raspberry Pi setups as outlined in the Dual-Device Hardware Checklist and Recommendations. This includes two Pis, two power supplies, two enclosures/cooling solutions, two microSD cards, and two SSDs (one 2TB+, one 256GB+).</li> <li>Prepare SD Cards: You should have already flashed two separate microSD cards using the Web3 Pi Imager in Dual-Device mode \u2013 one configured for the EL node and one for the CL node. Keep them clearly identifiable.</li> <li>Reference Guide: Keep the Single-Device Hardware Assembly Guide open in another tab or window. You will follow those detailed steps twice, once for each device.</li> </ol>"},{"location":"setup/dual-mode/hardware-assembly/#assembly-steps","title":"Assembly Steps","text":""},{"location":"setup/dual-mode/hardware-assembly/#step-1-decide-and-label-your-devices-crucial","title":"Step 1: Decide and Label Your Devices (Crucial!)","text":"<p>Before assembling anything, decide which Raspberry Pi will be your EL Node and which will be your CL Node.</p> <p>Label Everything Clearly</p> <p>Use sticky notes, labels, or markers to clearly label each Raspberry Pi board, enclosure/case, and the corresponding EL and CL microSD cards. This labeling will prevent you from inserting the wrong SD card or SSD into the wrong device.</p>"},{"location":"setup/dual-mode/hardware-assembly/#step-2-assemble-the-execution-layer-el-node","title":"Step 2: Assemble the Execution Layer (EL) Node","text":"<ol> <li>Take the Raspberry Pi and enclosure you designated as the EL Node.</li> <li>Follow the detailed steps outlined in the Single-Device Hardware Assembly Guide precisely.</li> <li>Critical Check - SSD: When you reach the step to install the storage drive, ensure you install the larger (2TB or greater) SSD into this EL Node device.</li> <li>Critical Check - SD Card: When you reach the step to insert the microSD card, ensure you insert the card specifically flashed and labeled for the EL Node.</li> <li>Complete the assembly for the EL Node as per the single-device guide.</li> </ol>"},{"location":"setup/dual-mode/hardware-assembly/#step-3-assemble-the-consensus-layer-cl-node","title":"Step 3: Assemble the Consensus Layer (CL) Node","text":"<ol> <li>Take the Raspberry Pi and enclosure you designated as the CL Node.</li> <li>Follow the detailed steps outlined in the Single-Device Hardware Assembly Guide precisely, just as you did for the EL node.</li> <li>Critical Check - SSD: When you reach the step to install the storage drive, ensure you install the smaller (256GB or greater) SSD into this CL Node device.</li> <li>Critical Check - SD Card: When you reach the step to insert the microSD card, ensure you insert the card specifically flashed and labeled for the CL Node.</li> <li>Complete the assembly for the CL Node as per the single-device guide.</li> </ol>"},{"location":"setup/dual-mode/hardware-assembly/#step-4-final-check","title":"Step 4: Final Check","text":"<p>You should now have two fully assembled Raspberry Pi devices:</p> <ul> <li>One labeled \"EL Node\" containing the larger SSD and the EL microSD card.</li> <li>One labeled \"CL Node\" containing the smaller SSD and the CL microSD card.</li> </ul> <p>Double-check your labels and component placement one last time.</p>"},{"location":"setup/dual-mode/hardware-assembly/#hardware-connections","title":"Hardware connections","text":"<p>Once you have both devices assembled, connect them as follows:</p> <p></p> <p>Warning</p> <p>For the mDNS mechanism to work, both devices must be connected to the same local network. It's recommended to use one network switch for both devices. </p> <p>Refer to the following image to verify your setup:</p> <p></p> <p>Ensure all cables and storage devices are securely connected before proceeding.</p>"},{"location":"setup/dual-mode/hardware-assembly/#next-steps","title":"Next Steps","text":"<p>With both devices assembled correctly, you are ready to connect them to your network and begin the software installation and synchronization process.</p>"},{"location":"setup/dual-mode/hardware-checklist/","title":"Required Hardware","text":""},{"location":"setup/dual-mode/hardware-checklist/#dual-device-node-requirements","title":"Dual Device Node Requirements","text":"<p>Suggested configurations:</p> <ul> <li>2 X Raspberry Pi 5</li> <li>2 X Raspberry Pi 4</li> <li>1 X Raspberry Pi 5 + 1 X Raspberry Pi 4</li> </ul> <p>or any other combination, including CM4.</p> <p>The default setup requires the following hardware components:</p> <ul> <li>2 x Raspberry Pi (8GB) starter kits</li> <li>2 x SSD (one for each device)</li> <li>1 x SD Card reader/writer</li> <li>2 x Fast microSD Card</li> </ul> <p>Optionally, you can add an LCD display to each Raspberry Pi for monitoring purposes.</p> <p>A device with an execution client needs 2TB+ fast storage. A device with a consensus client needs 256GB+ fast storage.</p>"},{"location":"setup/dual-mode/hardware-checklist/#raspberry-pi","title":"Raspberry Pi","text":"<p>You can use:</p> <ul> <li>Raspberry Pi 5\u00a0with\u00a0Active cooling</li> <li>Raspberry Pi 4\u00a0with\u00a0Active cooling</li> <li>Raspberry Pi CM4\u00a0with\u00a0Active cooling\u00a0and motherboard</li> </ul> <p>Note</p> <p>8GB\u00a0RAM is required.</p>"},{"location":"setup/dual-mode/hardware-recommendations/","title":"Web3 Pi: Recommended Hardware","text":"<p>In a dual-device setup, the workload of running an Ethereum node is split between two Raspberry Pi devices. One device runs the Execution Layer (EL) client (like Geth), which requires significant storage, while the other runs the Consensus Layer (CL) client (like Nimbus or Lighthouse), which has much lower storage needs but still benefits from fast access.</p> <p>This setup requires two complete Raspberry Pi systems, each with its own Pi, power supply, storage, SD card, and cooling/enclosure.</p> <p>Supported combinations include:</p> <ul> <li>Two Raspberry Pi 5</li> <li>Two Raspberry Pi 4</li> <li>One Raspberry Pi 5 and one Raspberry Pi 4</li> <li>Any combination including Compute Module 4/5</li> </ul>"},{"location":"setup/dual-mode/hardware-recommendations/#raspberry-pi-models","title":"Raspberry Pi Models","text":"<p>You will need two Raspberry Pi devices. The following models are supported:</p> <ul> <li>Raspberry Pi 5: Recommended for best performance, especially for the EL client.</li> <li>Raspberry Pi 4 Model B: A viable option, particularly suitable for the CL client or if cost is a major factor. Can also run the EL client, though sync times may be longer than Pi 5.</li> <li>Raspberry Pi Compute Module 4 (CM4): Requires a compatible carrier board with necessary ports (Ethernet, USB, potentially PCIe/M.2) and a cooling solution.</li> </ul> <p>RAM Requirement</p> <p>Regardless of the model chosen, both Raspberry Pi devices must have at least 8GB of RAM.</p> <p>Refer to the hardware checklists for specific model links:</p> <ul> <li>Single Device Checklist (useful for Pi links)</li> <li>Dual Device Checklist</li> </ul>"},{"location":"setup/dual-mode/hardware-recommendations/#ssd-drive-requirements","title":"SSD Drive Requirements","text":"<ul> <li>Execution Client (EL) Device: Needs a 2 TB or larger fast SSD (NVMe or USB 3.0) to store the growing Ethereum blockchain state data.</li> <li>Consensus Client (CL) Device: Needs a 500 GB or larger fast SSD. While 500GB is sufficient currently. NVMe or a reliable USB 3.0 SSD is recommended.</li> </ul>"},{"location":"setup/dual-mode/hardware-recommendations/#connection-options","title":"Connection Options","text":"<ul> <li> <p>Raspberry Pi 5: </p> <ul> <li>External USB 3.0 SSD drive.</li> <li>M.2 NVMe drive with an NVMe HAT (connects via PCIe).</li> <li>M.2 NVMe drive with a USB 3.0 to M.2 adapter.</li> </ul> </li> <li> <p>Raspberry Pi 4 / CM4 (with appropriate carrier board): </p> <ul> <li>External USB 3.0 SSD drive.</li> <li>M.2 NVMe drive with a USB 3.0 to M.2 adapter.</li> <li>(Some CM4 carrier boards may offer direct M.2 slots).</li> </ul> </li> </ul> <p>Use USB 3.0 Ports</p> <p>If using USB-connected storage, always use the blue USB 3.0 ports on the Raspberry Pi for maximum speed.</p>"},{"location":"setup/dual-mode/hardware-recommendations/#recommendations-for-execution-client-ssd-2tb","title":"Recommendations for Execution Client SSD (2TB+)","text":"<p>This device requires a large, fast drive. The recommendations are the same as for the single-device mode.</p>"},{"location":"setup/dual-mode/hardware-recommendations/#usb-drive-el","title":"USB Drive (EL)","text":"Brand/Model Comment Link Samsung T7 2TB USB 3.2 Recommended for RPi4 users. Compatible with Raspberry Pi 4 and 5 More Info <p>Tip</p> <p>Some external disks consume more power than Raspberry Pi can deliver via USB. For Raspberry Pi 5, the max power output of the USB ports is 600mA if you're using a 3A supply, and 1600mA if you're using a 5A supply. You can edit <code>/boot/firmware/config.txt</code> and add <code>usb_max_current_enable=1</code> to disable the current limit. Please read the documentation: Link</p>"},{"location":"setup/dual-mode/hardware-recommendations/#nvme-drive-el","title":"NVMe Drive (EL)","text":"<p>These drives need adapters (HAT or USB). See below.</p> Brand/Model Controller Comment Link Lexar NM7902TB m.2 2280 MaxiotekMAP1602A single side design 4TB available Product pageMore Info Goodram PX7002TB m.2 2280 MaxiotekMAP1602A single side design 4TB available Product page Micron 24002TB m.2 2230 Silicon MotionSM2269XT single side design ~4 W (Max)small 2230 form factorlow power consumptionlow heat Product pageMore Info Samsung 980 Pro2TB m.2 2280 SamsungElpis (S4LV003) single side design 7.2 W (Max) Product pageMore Info <p>Note</p> <p>Double-sided NVMe m.2 memory modules (with memory chips on both sides of the PCB) may not be fully compatible with every enclosure due to physical dimensions, specifically the height of the m.2 slot in the adapter/enclosure.</p>"},{"location":"setup/dual-mode/hardware-recommendations/#nvme-hat-pi-5-el","title":"NVMe Hat (Pi 5) (EL)","text":"Brand Link Pimoroni NVMe Base for Raspberry Pi 5 Raspberry Pi m.2 Hat https://www.raspberrypi.com/products/m2-hat-plus Pineboards HatDrive: Bottom https://pineberrypi.com/products/hatdrive-bottom-2230-2242-2280-for-rpi5 Pineboards HatDrive: Top https://pineboards.io/products/hat-top-2230-2240-for-rpi5 Waveshare 26583 https://www.waveshare.com/pcie-to-m.2-hat-plus.htm"},{"location":"setup/dual-mode/hardware-recommendations/#recommendations-for-consensus-client-ssd-500gb","title":"Recommendations for Consensus Client SSD (500GB+)","text":"<p>This device requires a smaller, but still fast and reliable drive.</p>"},{"location":"setup/dual-mode/hardware-recommendations/#usb-drive-cl","title":"USB Drive (CL)","text":"Brand/Model Comment Link Samsung T7 500GB USB 3.2 Recommended for RPi4 users. Compatible with Raspberry Pi 4 and 5 More Info"},{"location":"setup/dual-mode/hardware-recommendations/#nvme-drive-cl","title":"NVMe Drive (CL)","text":"<p>These drives need adapters (HAT or USB). Choose a reputable brand. 500GB or more are suitable sizes.</p> Brand/Model Controller Comment Link Lexar NM7901TB m.2 2280 MaxiotekMAP1602A single side design 4TB available Product pageMore Info Goodram PX7001TB m.2 2280 MaxiotekMAP1602A single side design 4TB available Product page Micron 24001TB m.2 2230 Silicon MotionSM2269XT single side design ~4 W (Max)small 2230 form factorlow power consumptionlow heat Product pageMore Info Samsung 980 Pro1TB m.2 2280 SamsungElpis (S4LV003) single side design 7.2 W (Max) Product pageMore Info"},{"location":"setup/dual-mode/hardware-recommendations/#nvme-hat-pi-5-cl","title":"NVMe Hat (Pi 5) (CL)","text":"<p>Same HATs as recommended for the EL client can be used here with a smaller NVMe drive. See NVMe Hat (Pi 5) (EL) section above.</p>"},{"location":"setup/dual-mode/hardware-recommendations/#usb-to-nvme-adapters-cl","title":"USB to NVMe adapters (CL)","text":"<p>Same adapters as recommended for the EL client can be used here with a smaller NVMe drive. See USB to NVMe adapters (EL) section above.</p>"},{"location":"setup/dual-mode/hardware-recommendations/#sd-card-reader-and-writer","title":"SD Card Reader and Writer","text":"<p>You only need one SD card reader/writer to flash the operating system onto both microSD cards.</p>"},{"location":"setup/dual-mode/hardware-recommendations/#microsd-cards","title":"MicroSD Cards","text":"<p>You will need two microSD cards, one for each Raspberry Pi.</p> <ul> <li>Requirement: 32GB minimum capacity. Faster cards can improve boot times.</li> <li>Recommendations: (Refer to the list in the Single Mode Recommendations) - purchase two cards.</li> </ul>"},{"location":"setup/dual-mode/hardware-recommendations/#power-supplies","title":"Power Supplies","text":"<p>You will need two power supplies, one appropriate for each Raspberry Pi model you are using.</p> <ul> <li>Raspberry Pi 5: Official Raspberry Pi 27W USB-C Power Supply (5.1V/5A) is strongly recommended.</li> <li>Raspberry Pi 4: Official Raspberry Pi 15.3W USB-C Power Supply (5.1V/3A) is strongly recommended.</li> <li>CM4: Depends on the carrier board requirements. Check the carrier board documentation.</li> </ul> <p>Using the official power supplies ensures stability, especially when powering connected peripherals like SSDs.</p>"},{"location":"setup/dual-mode/hardware-recommendations/#enclosures-and-active-cooling","title":"Enclosures and Active Cooling","text":"<p>Active cooling is mandatory for both Raspberry Pi devices in a dual-node setup to prevent thermal throttling and ensure stability. You will need two enclosures with active cooling.</p> <ul> <li>For Raspberry Pi 5: Choose one of the recommended cases with integrated fan/heatsink. (Refer to Single Mode Recommendations).</li> <li>For Raspberry Pi 4: Choose one of the recommended cases with integrated fan/heatsink. (Refer to Single Mode Recommendations).</li> <li>For CM4: Ensure your chosen carrier board has a suitable active cooling solution attached or available.</li> </ul>"},{"location":"setup/dual-mode/hardware-recommendations/#optional-lcd-display","title":"Optional: LCD Display","text":"<p>You can add an optional LCD display to either or both Raspberry Pi devices for at-a-glance monitoring.</p> <ul> <li>Refer to the LCD Monitoring Guide for hardware and setup details.</li> </ul>"},{"location":"setup/dual-mode/hardware-recommendations/#networking","title":"Networking","text":"<ul> <li>You will need two Ethernet cables (Cat5e or better).</li> <li>Ensure your router or network switch has at least two available Gigabit Ethernet ports.</li> <li>Refer to the main Prerequisites Guide for internet speed requirements.</li> </ul> <p>Choosing the right hardware ensures a stable and performant dual-device node setup. Remember to clearly label your devices during assembly to avoid confusion!</p>"},{"location":"setup/dual-mode/installation-monitoring/","title":"Web3 Pi: Installation Monitoring Guide - Dual Device Node","text":"<p>Once you have flashed the boot cards and assembled the hardware, you're ready to install and activate Web3 Pi in dual device mode.</p>"},{"location":"setup/dual-mode/installation-monitoring/#pre-installation-checklist","title":"Pre-installation Checklist","text":"<ul> <li> <p>Ensure your Raspberry Pis have active cooling.</p> </li> <li> <p>The Execution Client should have at least 2 TB SSD storage. The Consensus Client needs at least 256 GB.</p> </li> <li> <p>You should have flashed two boot cards. Make sure the boot card for the Execution Client is loaded into the machine with the larger SSD drive, and the Consensus Client boot card is inserted into the smaller one.</p> </li> <li> <p>Make sure the devices are protected against power surges with a UPS</p> </li> <li> <p>Connect the Raspberry Pis using Ethernet cables to your network, and ensure the network is connected to the Internet.</p> </li> </ul>"},{"location":"setup/dual-mode/installation-monitoring/#installation","title":"Installation","text":"<p>Installation will begin automatically as soon as you connect the power cable.</p> <p>You can monitor the installation on both devices by entering the corresponding addresses in your browser, based on the previously defined hostnames. The default values are:</p> <ul> <li>http://eop-1-exec.local</li> <li>http://eop-1-cons.local</li> <li>The monitoring should start working approximately three minutes after the device is first switched on.</li> </ul> <p>Replace <code>eop-1-exec</code> and <code>eop-1-cons</code> with your hostnames that you entered during the microSD card burning process.</p> <p>After approximately 3 minutes from powering on the device for the first time, you should see a similar page - for both devices.</p> <p></p> <p>Note</p> <p>Leave the device for about 8-15 minutes to complete the installation process. Do not disconnect power during this time. The time may vary depending on the bandwidth of the internet connection.</p>"},{"location":"setup/dual-mode/installation-monitoring/#grafana-dashboard-access","title":"Grafana Dashboard Access","text":"<p>Next, click the link to the Grafana dashboard. If everything has gone smoothly, you should see the login panel. The default username is 'admin', and the password is 'admin'. You will be required to change the password upon first login.</p> <p>In the Grafana Panel, click on the dashboard named 'Ethereum Nodes Monitor'.</p> <p></p> <p>Note</p> <p>Pay attention to the status of the consensus and execution clients. Initially, both will be 'inactive'</p> <p></p> <p>In the next step, the execution client will change to 'waiting'.</p> <p>Then both will transition to the 'syncing' state.</p> <p>Grafana URL: http://eop-1-exec.local:3000</p>"},{"location":"setup/dual-mode/installation-monitoring/#blockchain-synchronization","title":"Blockchain Synchronization","text":"<p>At this point, the blockchain synchronization process will begin and will take approximately 19 hours.</p> <p>The CPU load will increase until it reaches its maximum possible value.</p> <p>Disk usage will grow to around 1.2TB.</p>"},{"location":"setup/dual-mode/installation-monitoring/#synchronization-complete","title":"Synchronization Complete","text":"<p>Full synchronization will be achieved when the status of both the execution and consensus clients turns green (\"synced\").</p>"},{"location":"setup/dual-mode/installation-monitoring/#ssh-access","title":"SSH Access","text":"<p>After the installation completes successfully, you should have SSH access to the Web3 Pi node.</p> <p>Username: ethereum Password: ethereum</p> <p>You can use [your-hostname].local as the SSH address or the IP address if you know it.</p> <p>If the 'ethereum' user does not exist, it means the installation failed unexpectedly (in such case, please contact support).</p> <p>By default, the <code>ethereum</code> user is required to change the password during the first login.</p>"},{"location":"setup/dual-mode/software-setup/","title":"Web3 Pi Image Installation Guide","text":"<p>This guide will walk you through the process of writing the Web3 Pi image to a microSD card using the Web3 Pi Imager tool.</p>"},{"location":"setup/dual-mode/software-setup/#getting-started","title":"Getting Started","text":"<p>Follow the instructions below to write images on the microSD card:</p> <ol> <li>Download and install Web3 Pi Imager</li> <li>Insert the microSD card into the card reader and connect the reader to your PC</li> <li>Open the Web3 Pi Imager on your PC</li> <li>Choose the Single Mode Device</li> </ol> <p></p>"},{"location":"setup/dual-mode/software-setup/#configuration-options","title":"Configuration Options","text":"<p>For Dual Mode device, the following settings can be configured. In this mode, we set separate hostnames, clients, and ports for the execution layer device and the consensus layer device:</p> <ul> <li>Image version: Default is the latest version of Web3 Pi Image</li> <li>Default Ethereum Network: Choice between <code>Mainnet</code>, <code>Sepolia</code>, or <code>Holesky</code></li> <li>Execution device hostname: Use a unique hostname for the execution layer device. Default is <code>eop-1-exec.local</code></li> <li>Consensus device hostname: Use a unique hostname for the consensus layer device. Default is <code>eop-1-cons.local</code></li> <li>Execution client: Choose between <code>Geth</code> or <code>Disabled</code> for the execution layer device</li> <li>Execution Port for Geth: <code>30303</code> for the execution layer device</li> <li>Consensus Client: Choose between <code>Nimbus</code> or <code>Lighthouse</code> for the consensus layer device</li> <li>Consensus Client Port: <code>9000</code> for the consensus layer device</li> <li>Enable Grafana Monitoring: Turn on the advanced monitoring system by Grafana</li> <li>Format storage: Option to format external storage during installation</li> </ul> <p></p>"},{"location":"setup/dual-mode/software-setup/#advanced-options","title":"Advanced Options","text":"<p>If you click the ADVANCED button, you can configure these additional options. These advanced settings will be applied to both the execution layer device and the consensus layer device:</p> <ul> <li>Execution endpoint address: Optional custom endpoint for execution client</li> <li>Locale settings: Including:<ul> <li>Time zone selection</li> <li>Keyboard layout</li> </ul> </li> <li>Wireless LAN configuration: Including:<ul> <li>SSID</li> <li>Password</li> <li>Wireless LAN country selection</li> </ul> </li> </ul> <p>Note</p> <p>Wired Ethernet connection is recommended over Wi-Fi to ensure better synchronization.</p> <p></p>"},{"location":"setup/dual-mode/software-setup/#drive-selection","title":"Drive Selection","text":"<p>After setting up the configuration and clicking NEXT, a dialog box will appear allowing you to select the drive where the image with settings will be saved.</p> <ul> <li>Drive selection: The list shows available storage devices</li> <li>Display options:<ul> <li>By default, only drives smaller than 300GB are displayed</li> <li>Checking the \"Show large external storage device\" option will display devices larger than 300GB</li> </ul> </li> </ul> <p>Note</p> <p>Make sure you select the correct drive to avoid data loss on other devices</p> <p></p>"},{"location":"setup/dual-mode/software-setup/#accepting-terms-of-use","title":"Accepting Terms of Use","text":"<p>After selecting your target drive, a warning dialog will appear informing you that all data on the selected device will be erased.</p> <ul> <li>Confirms that all existing data on the selected drive will be permanently deleted</li> <li>You must accept the terms to proceed (the \"Yes\" button remains disabled until accepted). The full Terms of Use can be found at www.web3pi.io/terms.</li> </ul> <p>Note</p> <p>This is your final confirmation before the write process begins - ensure you have selected the correct device</p> <p></p>"},{"location":"setup/dual-mode/software-setup/#writing-process-execution-device","title":"Writing Process - Execution Device","text":"<p>After confirmation, the writing process for execution device begins.</p> <ul> <li>Writing process: The progress bar displays the current writing status</li> <li>Verification phase: After the writing completes, the verification process automatically starts. This step ensures data integrity and proper image installation.</li> </ul> <p>Note</p> <p>Do not disconnect or remove the storage device until both the writing and verification processes are complete</p> <p></p>"},{"location":"setup/dual-mode/software-setup/#replacing-cards","title":"Replacing cards","text":"<p>At this point, you need to switch the SD cards. Remove the card that has been written for the execution layer device and insert a new card for the consensus layer device. Select the appropriate storage destination for the consensus device image and confirm by clicking \"Yes\" to proceed with the writing process.</p> <p></p>"},{"location":"setup/dual-mode/software-setup/#writing-process-consensus-device","title":"Writing Process - Consensus Device","text":"<p>Now the process of writing the card for the consensus layer device will begin.</p> <ul> <li>Writing process: The progress bar displays the current writing status</li> <li>Verification phase: After the writing completes, the verification process automatically starts. This step ensures data integrity and proper image installation.</li> </ul> <p>Note</p> <p>Do not disconnect or remove the storage device until both the writing and verification processes are complete</p> <p></p>"},{"location":"setup/dual-mode/software-setup/#final-steps","title":"Final Steps","text":"<p>Now that you have both cards prepared, you will see a message about the possibility of installing the prepared cards in the appropriate devices. At this stage, you can click NEXT and complete the process. In the following steps, you will be able to assemble both devices and install the prepared cards in the corresponding slots.</p> <p> </p>"},{"location":"setup/single-mode/hardware-assembly/","title":"Web3 Pi: Hardware Assembly","text":"<p>This assembly guide is primarily aimed at assembling the components included in the Welcome Box, but will also be useful for anyone assembling their own hardware.</p> <p>Info</p> <p>To avoid errors during the first setup, please follow the instructions precisely.</p> <p>Please also see the video instructions for more information.</p> <p>If you have a Welcome Box, unpack the contents and check them against the components listed here.</p>"},{"location":"setup/single-mode/hardware-assembly/#components-overview","title":"Components Overview","text":"<ol> <li>Aluminium Top Cover with Screw Points</li> <li>Aluminium Case</li> <li>Cooling Fins and Exhaust Vent</li> <li>Fan Port Access</li> <li>POE HAT Connection</li> <li>GPIO Access</li> <li>MIPI Ports Access</li> <li>30mm PWM Blower-type Fan</li> <li>UART Connector</li> <li>RTC Battery Connector Access</li> <li>PCIe Port Access</li> <li>PCIE Film Strip</li> <li>Power Button and LED Light</li> <li>THRML M.2 Heatsink</li> <li>M.2 NVMe Drive Socket</li> </ol> <p>Some parts are in two zipper bags. Open them and carefully pour out the contents. You will find:</p> <ul> <li>Screws (two types)</li> <li>Rubber feet</li> <li>Two ribbon cables. You need one, the other one is a spare</li> </ul>"},{"location":"setup/single-mode/hardware-assembly/#assembly-instructions","title":"Assembly Instructions","text":""},{"location":"setup/single-mode/hardware-assembly/#1-prepare-the-raspberry-pi-5","title":"1. Prepare the Raspberry Pi 5","text":"<p>Place the thermal pads on the CPU, RP1, RAM and PMIC Chip of the RPi 5.</p> <p>There are different versions of this case on the market: * If you have four thermal pads, place them in the areas marked in blue. * If you have two thermal pads in the set, place them on the CPU and PMIC (left corner, near the USB-C connector).</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#2-connect-the-fan","title":"2. Connect the Fan","text":"<p>Connect the NEO 5 fan to the RPi 5 fan connector as shown in the image. Please pay attention to how the cable is routed.</p> <p></p> <p>Note</p> <p>There may be a small plug inserted in the fan connector. Remove it.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#3-connect-pcie-ribbon-cable","title":"3. Connect PCIe Ribbon Cable","text":"<p>Connect the PCIe flat ribbon cable to the Raspberry Pi 5 PCIe port. Be careful when handling brown PCIe flip/cover. Pull up the brown flip to release the lock.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#4-place-raspberry-pi-in-the-case","title":"4. Place Raspberry Pi in the Case","text":"<p>Drop in the RPi 5 inside the Argon NEO 5 M.2 NVMe Case</p> <p>Warning</p> <p>After inserting and pressing the RPi 5 into the central part of the Argon Neo 5 case, they will adhere due to the stickiness of the thermal pads. To ensure good thermal conductivity, do this once and avoid removing the RPi 5 from this part of the case again.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#5-route-the-pcie-cable","title":"5. Route the PCIe Cable","text":"<p>The PCIe flat ribbon cable should be threaded through the hole in the case, as shown in the picture.</p> <p> </p>"},{"location":"setup/single-mode/hardware-assembly/#6-connect-pcie-cable-to-m2-board","title":"6. Connect PCIe Cable to M.2 Board","text":"<p>Carefully connect the Raspberry Pi 5 with the PCIe flat ribbon cable with copper facing up to the Argon NEO 5 M.2 NVMe Carrier Board Case. Flip up the cover on the M.2 NVMe Expansion Board.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#7-insert-microsd-card","title":"7. Insert MicroSD Card","text":"<p>Here we want you to insert the PREVIOUSLY flashed microSD card with Web3 Pi image.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#8-prepare-m2-nvme-drive-installation","title":"8. Prepare M.2 NVMe Drive Installation","text":"<p>Connect your M.2 NVMe Drive to the Argon NEO 5 M.2 NVMe Carrier Board. Detailed instructions for this process are described in the following steps.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#9-check-nvme-compatibility","title":"9. Check NVMe Compatibility","text":"<p>Connect your M.2 NVMe Drive to the Argon NEO 5 M.2 NVMe Carrier Board. Detailed instructions for this process are described in the following steps.</p> <p>This Board will accept M.2 Key M and M.2 Key B+M NVMe Storage Drive.</p> <p>Warning</p> <p>This Board will accept M.2 Key M and M.2 Key B+M NVMe Storage Drive.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#10-remove-heatsink-cover","title":"10. Remove Heatsink Cover","text":"<p>Remove the \"THRMK M.2 Heatsink\" cover by unscrewing the four screws at its corners.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#11-adjust-screw-mount-position","title":"11. Adjust Screw Mount Position","text":"<p>Move the screw point on the Board to the appropriate size of your Storage Drive.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#12-insert-nvme-drive","title":"12. Insert NVMe Drive","text":"<p>Insert the NVMe drive into the M.2 slot as shown in the picture.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#13-secure-the-nvme-drive","title":"13. Secure the NVMe Drive","text":"<p>Screw in the NVMe drive as shown in the picture.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#14-apply-thermal-pad","title":"14. Apply Thermal Pad","text":"<p>Mount the thermal pad on the NVMe drive. There is no need to shorten it. Remember to remove the protective film from both sides.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#15-mount-metal-cover","title":"15. Mount Metal Cover","text":"<p>Mount the metal cover and screw it in using four screws with conical heads.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#16-secure-top-cover","title":"16. Secure Top Cover","text":"<p>Secure the Aluminium Top Cover with 2 screws.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#lcd-display-option","title":"LCD Display Option","text":"<p>If you have a plastic cover with an LCD display, connect it according to the diagram instead of the original metal one.</p> <p></p> <p>Warning</p> <p>Pay attention to the positioning of the cables when mounting the cover to ensure they don't mechanically obstruct the fan blades.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#final-assembly","title":"Final Assembly","text":"<p>The final result should look like this:</p> <p>Note</p> <p>Pay attention to the positioning of the cables when mounting the cover to ensure they don't mechanically obstruct the fan blades.</p> <p></p>"},{"location":"setup/single-mode/hardware-assembly/#hardware-connections","title":"Hardware Connections","text":"<p>Once you have assembled your device, connect the Raspberry Pi as shown below:</p> <p></p> <p>Refer to the following images to verify your setup. These show two typical configurations:</p> <ul> <li>With a USB drive:</li> </ul> <p></p> <ul> <li>With an NVMe drive:</li> </ul> <p></p> <p>Ensure all cables and storage devices are securely connected before proceeding.</p> <p>Note</p> <p>Before you connect power, make sure that the ethernet cable is connected with DHCP. Internet connection is required during the installation process.</p>"},{"location":"setup/single-mode/hardware-checklist/","title":"Web3 Pi: Hardware Checklist","text":"<p>Active cooling is required to avoid throttling and keep sufficient performance/stability of the system.</p> <p>As a power supply, we recommend using the official Raspberry Pi power supply for your model.</p> <p>Raspberry Pi + 2TB drive can use a significant amount of power so a sufficient power supply is important for stability.</p>"},{"location":"setup/single-mode/hardware-checklist/#single-device-node-requirements","title":"Single Device Node Requirements","text":"<p>You can run a single device node on any of the following.</p> <ul> <li> <p>Raspberry Pi 5 - see full details</p> </li> <li> <p>Raspberry Pi 4 - see full details</p> </li> <li> <p>Raspberry Pi CM4/5 - see ful details</p> </li> </ul> <p>Optionally, you can add an LCD display for monitoring purposes.</p>"},{"location":"setup/single-mode/hardware-checklist/#raspberry-pi-5","title":"Raspberry Pi 5","text":"<ul> <li>1 x Raspberry Pi 5 (8GB)</li> <li>1 X 2TB SSD drive (external USB SSD or NVMe m.2 with adapter)</li> <li>1 X SD Card reader/writer</li> <li>1 x microSD Card</li> <li>1 x Power supply</li> <li>1 x Raspberry Pi 5 Active Cooler</li> </ul>"},{"location":"setup/single-mode/hardware-checklist/#raspberry-pi-4","title":"Raspberry Pi 4","text":"<ul> <li>1 x Raspberry Pi 4 (8GB)</li> <li>1 x 2TB SSD drive (external USB SSD or NVMe with m.2 to USB adapter)</li> <li>1 x SD Card reader/writer</li> <li>1 x microSD Card</li> <li>1 X Raspberry Pi 4 Active Cooler</li> <li>1 x Power supply</li> </ul>"},{"location":"setup/single-mode/hardware-checklist/#raspberry-pi-compute-module","title":"Raspberry Pi Compute Module","text":"<p>The CM4/5 module needs a carrier board. There are many on the market.</p> <p>Minimum requiments are:</p> <ul> <li>1 x Raspberry Pi CM4/CM5 8GB</li> <li>1 x 2TB fast storage</li> <li>1 x Power supply</li> <li>1 x Raspberry Pi CM4 Active Cooler</li> <li>1 x 32GB+ storage for operating system (microSD or eMMC)</li> <li>1 x Motherboard</li> </ul> <p>Installing Web3 Pi on the CM4/5 requires more knowledge. CM4/5 modules come with built-in eMMC memory, and in this case, you need to use the rpiboot application before using the Raspberry Pi Imager. If your module does not have built-in memory and uses an SD card, the installation process is similar to a standard Raspberry Pi.</p> <p>More information can be found on the manufacturer's website: Raspberry Pi Documentation.</p> <p>In some cases, a bootloader update may be necessary, which is described here: How to Update the Raspberry Pi Compute Module 4 Bootloader EEPROM.</p>"},{"location":"setup/single-mode/hardware-recommendations/","title":"Web3 Pi: Recommended Hardware","text":""},{"location":"setup/single-mode/hardware-recommendations/#ssd-drive","title":"SSD Drive","text":"<p>2 TB\u00a0fast drive is required.</p> <p>For the Raspberry Pi 5, you have three options for storage:</p> <ul> <li>external USB SSD drive (wide availability)</li> <li>m.2 NVMe drive with NVMe HAT for Raspberry Pi 5 (max performance)</li> <li>m.2 NVMe drive with USB m.2 adapter</li> </ul> <p>Raspberry Pi 5 has a PCIe x1 connector on board so with a special adapter m.2 NVMe drive can be used. This option gives the maximum possible performance.</p> <p>For the Raspberry Pi 4,\u00a0you have two options for storage:</p> <ul> <li>external USB SSD drive (wide availability)</li> <li>SSD drive with USB adapter</li> </ul> <p>Note</p> <p>If you use USB always choose USB 3.0 ports (blue)</p> <p>Warning</p> <p>Do NOT use HDD drives!</p>"},{"location":"setup/single-mode/hardware-recommendations/#recommended-ssd-hardware","title":"Recommended SSD Hardware","text":""},{"location":"setup/single-mode/hardware-recommendations/#usb-drive","title":"USB Drive","text":"Brand/Model Comment Link Samsung T7 2TB USB 3.2 Recommended for RPi4 users. Compatible with Raspberry Pi 4 and 5 More Info <p>Tip</p> <p>Some external disks consume more power than Raspberry Pi can deliver via USB. For Raspberry Pi 5, the max power output of the USB ports is 600mA if you're using a 3A supply, and 1600mA if you're using a 5A supply. You can edit <code>/boot/firmware/config.txt</code> and add <code>usb_max_current_enable=1</code> to disable the current limit. Please read the documentation: Link</p>"},{"location":"setup/single-mode/hardware-recommendations/#nvme-drive","title":"NVMe Drive","text":"<p>These drives need adapters.</p> Brand/Model Controller Comment Link Lexar NM7902TB m.2 2280 MaxiotekMAP1602A single side design 4TB available Product pageMore Info Goodram PX7002TB m.2 2280 MaxiotekMAP1602A single side design 4TB available Product page Micron 24002TB m.2 2230 Silicon MotionSM2269XT single side design ~4 W (Max)small 2230 form factorlow power consumptionlow heat Product pageMore Info Samsung 980 Pro2TB m.2 2280 SamsungElpis (S4LV003) single side design 7.2 W (Max) Product pageMore Info <p>Note</p> <p>Double-sided NVMe m.2 memory modules (with memory chips on both sides of the PCB) may not be fully compatible with every enclosure due to physical dimensions, specifically the height of the m.2 slot in the adapter/enclosure.</p>"},{"location":"setup/single-mode/hardware-recommendations/#nvme-hat","title":"NVMe Hat","text":""},{"location":"setup/single-mode/hardware-recommendations/#nvme-hat-for-raspberry-pi-5","title":"NVMe HAT for Raspberry Pi 5","text":"Brand Link Pimoroni Product page Raspberry Pi m.2 Hat Product page Pineboards HatDrive: Bottom Product page Pineboards HatDrive: Top Product page Pineboards HatDrive: Nano Product page Waveshare 26583 Product page <p>We do not recommend the following:</p> <ul> <li> <p>KAmodRPi5 PCIe-M.2</p> </li> <li> <p>Geekworm X1001</p> </li> </ul>"},{"location":"setup/single-mode/hardware-recommendations/#sd-card-reader-and-writer","title":"SD Card Reader and Writer","text":"<p>You will use this on your PC for flashing the boot card. Since this operation takes time, we recommend a high-speed device.</p>"},{"location":"setup/single-mode/hardware-recommendations/#microsd-card","title":"MicroSD Card","text":"<p>Flashing a microSD card takes time, but it can be reduced by using a fast device. Additionally, using a fast micro SD card results in a shorter booting time.</p> <p>You will require at least 32GB capacity.</p> <p>A few examples:</p> <ul> <li>Silicon Power 3D NAND</li> <li>SanDisk Extreme Pro</li> <li>SanDisk Ultra</li> <li>SanDisk Max Endurance</li> <li>Kingston Canvas React</li> <li>Samsung 64 Evo Plus</li> <li>Lexar Professional 1000X</li> </ul> <p>More Information</p>"},{"location":"setup/single-mode/hardware-recommendations/#enclosures","title":"Enclosures","text":""},{"location":"setup/single-mode/hardware-recommendations/#enclosures-for-raspberry-pi-5","title":"Enclosures for Raspberry Pi 5","text":"Brand/Model Comment Link Argon NEO 5 M.2 NVMe +good cooling+metal-inconvenient access to the microSD card-m.2 slot not compatible with double side NVMe(easy modification possible with utility knife) Product pageShop Argon NEO 5 +easy acces to microSD card+good cooling+metal Product pageShop Argon ONE V3 M.2 NVMe +good cooling+metal-m.2 slot not compatible with double side NVMe(easy modification possible with utility knife) Product pageShop Argon ONE V3 +good cooling+metal Product pageShop"},{"location":"setup/single-mode/hardware-recommendations/#enclosures-for-raspberry-pi-4b","title":"Enclosures for Raspberry Pi 4B","text":"Brand/Model Comment Link Case justPi assembly instructions Product pageShop Argon One V2 Fan control needs additional configurationas described by the manufacturer manual Product pageShop Argon One V2 m.2 Fan control needs additional configurationas described by the manufacturer manual Product pageShop"},{"location":"setup/single-mode/installation-monitoring/","title":"Web3 Pi: Installation Monitoring Guide - Single Device Node","text":"<p>Now that the device is assembled and the card is inside, go back to the Web3 Pi Imager and follow the instructions:</p> <ol> <li>Connect the necessary cables.</li> <li>Ensure Internet connection (via DHCP) is available.</li> <li>Turn on the device and then press the NEXT button.</li> </ol> <p></p>"},{"location":"setup/single-mode/installation-monitoring/#sd-card-installation-complete","title":"SD Card Installation Complete","text":"<ul> <li>Web3 Pi installer has been successfully written to the SD card.</li> <li>At this point, the card is ready, and the installation process on the device begins.</li> <li>Now the device is being searched on the network - this may take about 2 minutes, after which the user will be able to monitor the further installation process.</li> </ul>"},{"location":"setup/single-mode/installation-monitoring/#track-installation-progress","title":"Track Installation Progress","text":"<p>Now you can click the \"Track\" button - a page with the software installation process on the device will open.</p> <p></p> <p>Note</p> <p>From this point, the user can log in via SSH using the credentials ethereum:ethereum</p>"},{"location":"setup/single-mode/installation-monitoring/#monitor-installation","title":"Monitor Installation","text":"<p>You can monitor the installation process through a dedicated website: http://eop-1.local</p> <p>The monitoring should start working approximately three minutes after the device is first switched on.</p> <p>Replace <code>eop-1</code> with your hostname that you entered during the microSD card burning process in Web3 Pi Imager, if you used a name other than <code>eop-1</code>.</p> <p>After approximately 3 minutes from powering on the device for the first time, you should see a similar page.</p> <p></p> <p>Note</p> <p>Leave the device for about 8-15 minutes to complete the installation process. Do not disconnect power during this time. The time may vary depending on the bandwidth of the internet connection.</p>"},{"location":"setup/single-mode/installation-monitoring/#installation-web-interface","title":"Installation Web Interface","text":"<p>The Raspberry Pi with the Web3 Pi image on port 80 hosts an HTTP server that continuously displays the following in the web browser:</p> <ul> <li>The installation stage</li> <li>The hostname and IP address of the device</li> <li>The full installation log and uptime</li> <li>A link to the Grafana dashboard and a JSON status file</li> </ul> <p>The installation is divided into stages. The installation is complete when you see: \"STAGE 100: Installation completed.\" This status is shown in the following screenshot.</p>"},{"location":"setup/single-mode/installation-monitoring/#grafana-dashboard-access","title":"Grafana Dashboard Access","text":"<p>Next, click the link to the Grafana dashboard. If everything has gone smoothly, you should see the login panel. The default username is 'admin', and the password is 'admin'. You will be required to change the password upon first login.</p> <p>In the Grafana Panel, click on the dashboard named 'Ethereum Nodes Monitor'.</p> <p></p> <p>Note</p> <p>Pay attention to the status of the consensus and execution clients. Initially, both will be 'inactive'</p> <p></p> <p>In the next step, the execution client will change to 'waiting'.</p> <p>Then both will transition to the 'syncing' state.</p> <p>Grafana URL: http://eop-1.local:3000</p>"},{"location":"setup/single-mode/installation-monitoring/#blockchain-synchronization","title":"Blockchain Synchronization","text":"<p>At this point, the blockchain synchronization process will begin and will take approximately 19 hours.</p> <p>The CPU load will increase until it reaches its maximum possible value.</p> <p>Disk usage will grow to around 1.2TB.</p>"},{"location":"setup/single-mode/installation-monitoring/#synchronization-complete","title":"Synchronization Complete","text":"<p>Full synchronization will be achieved when the status of both the execution and consensus clients turns green (\"synced\").</p>"},{"location":"setup/single-mode/installation-monitoring/#ssh-access","title":"SSH Access","text":"<p>After the installation completes successfully, you should have SSH access to the Web3 Pi node.</p> <p>Username: ethereum Password: ethereum</p> <p>You can use [your-hostname].local as the SSH address or the IP address if you know it.</p> <p>If the 'ethereum' user does not exist, it means the installation failed unexpectedly (in such case, please contact support).</p> <p>By default, the <code>ethereum</code> user is required to change the password during the first login.</p>"},{"location":"setup/single-mode/installation-monitoring/#network-configuration-verification","title":"Network Configuration Verification","text":"<p>To check that the network is working correctly, SSH into the Rasberry Pi and run a <code>ping</code> command:</p> <pre><code>ping -c 4 google.com\n</code></pre> <p>You should see similar response:</p> <pre><code>PING google.com (142.250.186.206) 56(84) bytes of data.\n64 bytes from waw07s05-in-f14.1e100.net (142.250.186.206): icmp_seq=1 ttl=59 time=2.83 ms\n64 bytes from waw07s05-in-f14.1e100.net (142.250.186.206): icmp_seq=2 ttl=59 time=3.62 ms\n64 bytes from waw07s05-in-f14.1e100.net (142.250.186.206): icmp_seq=3 ttl=59 time=2.23 ms\n64 bytes from waw07s05-in-f14.1e100.net (142.250.186.206): icmp_seq=4 ttl=59 time=3.73 ms\n\n--- google.com ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 3005ms\nrtt min/avg/max/mdev = 2.229/3.102/3.734/0.614 ms\n</code></pre> <p>You now have a fully operational Ethereum node running Geth and Nimbus.</p> <p>For more information on managing, configuring and troubleshooting your node, please refer to the Managing Your Node menu.</p>"},{"location":"setup/single-mode/software-setup/","title":"Web3 Pi Image Installation Guide","text":"<p>This guide will walk you through the process of writing the Web3 Pi image to a microSD card using the Web3 Pi Imager tool.</p>"},{"location":"setup/single-mode/software-setup/#getting-started","title":"Getting Started","text":"<p>Follow the instructions below to write images on the microSD card:</p> <ol> <li>Download and install Web3 Pi Imager</li> <li>Insert the microSD card into the card reader and connect the reader to your PC</li> <li>Open the Web3 Pi Imager on your PC</li> <li>Choose the Single Mode Device</li> </ol> <p></p>"},{"location":"setup/single-mode/software-setup/#configuration-options","title":"Configuration Options","text":"<p>For Single Mode device, the following settings can be configured:</p> <ul> <li>Image version: Default is the latest version of Web3 Pi Image</li> <li>Default Ethereum Network: Choice between <code>Mainnet</code>, <code>Sepolia</code>, or <code>Holesky</code></li> <li>Hostname for Raspberry Pi: Use a unique hostname. Default is <code>eop-1.local</code></li> <li>Execution client: Choose between <code>Geth</code> or <code>Disabled</code></li> <li>Execution Port for Geth: <code>30303</code></li> <li>Consensus Client: Choose between <code>Nimbus</code> or <code>Lighthouse</code></li> <li>Consensus Client Port: <code>9000</code></li> <li>Enable Grafana Monitoring: Turn on the advanced monitoring system by Grafana</li> <li>Format storage: Option to format external storage during installation</li> </ul> <p></p>"},{"location":"setup/single-mode/software-setup/#advanced-options","title":"Advanced Options","text":"<p>If you click the ADVANCED button, you can configure these additional options:</p> <ul> <li>Execution endpoint address: Optional custom endpoint for execution client</li> <li>Locale settings: Including:<ul> <li>Time zone selection</li> <li>Keyboard layout</li> </ul> </li> <li>Wireless LAN configuration: Including:<ul> <li>SSID</li> <li>Password</li> <li>Wireless LAN country selection</li> </ul> </li> </ul> <p>Note</p> <p>Wired Ethernet connection is recommended over Wi-Fi to ensure better synchronization.</p> <p></p>"},{"location":"setup/single-mode/software-setup/#drive-selection","title":"Drive Selection","text":"<p>After setting up the configuration and clicking NEXT, a dialog box will appear allowing you to select the drive where the image with settings will be saved.</p> <ul> <li>Drive selection: The list shows available storage devices</li> <li>Display options:<ul> <li>By default, only drives smaller than 300GB are displayed</li> <li>Checking the \"Show large external storage device\" option will display devices larger than 300GB</li> </ul> </li> </ul> <p>Note</p> <p>Make sure you select the correct drive to avoid data loss on other devices</p> <p></p>"},{"location":"setup/single-mode/software-setup/#accepting-terms-of-use","title":"Accepting Terms of Use","text":"<p>After selecting your target drive, a warning dialog will appear informing you that all data on the selected device will be erased.</p> <ul> <li>Confirms that all existing data on the selected drive will be permanently deleted</li> <li>You must accept the terms to proceed (the \"Yes\" button remains disabled until accepted). The full Terms of Use can be found at www.web3pi.io/terms.</li> </ul> <p>Note</p> <p>This is your final confirmation before the write process begins - ensure you have selected the correct device</p> <p></p>"},{"location":"setup/single-mode/software-setup/#writing-process","title":"Writing Process","text":"<p>After confirmation, the writing process to the selected storage device begins.</p> <ul> <li>Writing process: The progress bar displays the current writing status</li> <li>Verification phase: After the writing completes, the verification process automatically starts. This step ensures data integrity and proper image installation.</li> </ul> <p>Note</p> <p>Do not disconnect or remove the storage device until both the writing and verification processes are complete</p> <p></p>"},{"location":"setup/single-mode/software-setup/#final-steps","title":"Final Steps","text":"<p>Now after the card has finished writing you will see a screen informing you about installing the prepared card to the device.</p> <p></p> <p>Keep Web3 Pi Imager open at this step and now we will start assembling the device. We will come back to this step after we finish assembling.</p>"},{"location":"support/cheatsheet/","title":"Cheatsheet","text":"<p>This cheatsheet provides a quick reference for commonly used commands, ports, credentials, and configurations for your Web3 Pi node.</p>"},{"location":"support/cheatsheet/#default-credentials","title":"Default Credentials","text":"<p>SSH Access:</p> Username Password <code>ethereum</code> <code>ethereum</code> <p>Note: You are required to change this password upon first SSH login.</p> <p>Grafana Dashboard:</p> Username Password <code>admin</code> <code>admin</code> <p>Note: You will be prompted to change this password upon first Grafana login. It is highly recommended to do so.</p>"},{"location":"support/cheatsheet/#common-network-ports","title":"Common Network Ports","text":"Port Service / Description Access Method <code>22</code> SSH SSH <code>80</code> Installation Monitor / Status Page HTTP <code>3000</code> Grafana Dashboard HTTP <code>5052</code> Lighthouse HTTP REST API HTTP <code>5353</code> mDNS (Avahi Daemon) mDNS <code>7197</code> Basic System Monitor JSON API HTTP <code>8008</code> InfluxDB HTTP API HTTP <code>8545</code> Execution Client JSON-RPC (Geth) HTTP <code>8546</code> Execution Client WebSocket RPC (Geth) HTTP <code>8551</code> Execution Client Engine API (Geth) HTTP <code>9000</code> Consensus Client P2P (Lighthouse) TCP/UDP <code>9000</code> Consensus Client P2P (Nimbus) TCP/UDP <code>9090</code> Cockpit System Dashboard HTTPS <code>30303</code> Execution Client P2P (Geth) TCP/UDP"},{"location":"support/cheatsheet/#how-to-find-your-nodes-ip-address-or-hostname","title":"How to find your nodes ip address or hostname","text":"<ul> <li>Hostname: Use the hostname you chose during image creation (e.g., <code>web3pi.local</code>, <code>eop-1.local</code>). Check via SSH with <code>hostname</code>.</li> <li>IP Address: Check your router's admin panel or use network scanning tools to find the IP address assigned to your Raspberry Pi.</li> <li>LCD Display: If installed, the LCD Dashboard shows the current IP address and hostname.</li> </ul>"},{"location":"support/cheatsheet/#log-files","title":"Log files","text":"<ul> <li>Web3 Pi Logs: <code>/var/log/web3pi.log</code></li> <li>rc.local logs: <code>/root/first-run.flag</code></li> </ul>"},{"location":"support/cheatsheet/#internet-connectivity","title":"Internet connectivity","text":""},{"location":"support/cheatsheet/#bandwidth","title":"Bandwidth","text":"<p>To achieve optimal synchronization performance, your internet connection should have a download bandwidth of at least 160 Mb/s (20 MB/s). The upload requirement, however, is significantly lower. The synchronization process with the Ethereum mainnet requires downloading approximately 1.2 TB of data. [1.1 TB download, 25 GB upload - October 2024] So please be cautious if your internet connection is metered. A slower internet connection will still function, though the synchronization process will take longer. While upload and download speeds are important, they are only one factor in determining the quality of your connection. Ideally, a stable connection with low latency (ping) is recommended. For optimal performance, having a static public IP address is beneficial, but it is not strictly necessary.</p>"},{"location":"support/cheatsheet/#wifi","title":"WIFI","text":"<p>The default and recommended method for connecting the Raspberry Pi in the Web3 Pi project is via a wired Ethernet connection with automatic DHCP configuration. However, you can also connect Raspberry Pi 4/5 to the internet using the built-in WiFi module. To do so, in Raspberry Pi Imager, you must provide the SSID and password for your WiFi network.</p> <p>Although using WiFi is possible, we strongly recommend using a wired connection. Over time, WiFi may lead to issues with connection stability and bandwidth performance.</p> <p>Note</p> <p>If you are using WIFI, do not connect the Ethernet cable to the Raspberry Pi.</p>"},{"location":"support/cheatsheet/#common-monitoring-management-commands-via-ssh","title":"Common Monitoring &amp; Management Commands (via SSH)","text":"<p>Many system management and logging commands require elevated privileges. Use <code>sudo</code> before the command as shown below. You will be prompted for the <code>ethereum</code> user's password the first time you use <code>sudo</code> in a session.</p> <p>Replace <code>&lt;service_name&gt;</code> with the actual service: <code>w3p_geth</code>, <code>w3p_lighthouse-beacon</code>, or <code>w3p_nimbus-beacon</code>.</p>"},{"location":"support/cheatsheet/#service-management-systemd","title":"Service Management (systemd)","text":"<ul> <li>Check Status: See if a service is running and view recent log snippets.   <pre><code>sudo systemctl status &lt;service_name&gt;\n# Example: Check Geth status\nsudo systemctl status w3p_geth\n</code></pre></li> <li>Start Service: <pre><code>sudo systemctl start &lt;service_name&gt;\n</code></pre></li> <li>Stop Service: <pre><code>sudo systemctl stop &lt;service_name&gt;\n</code></pre></li> <li>Restart Service: (Stop and then start)   <pre><code>sudo systemctl restart &lt;service_name&gt;\n</code></pre></li> <li>Enable Service: (Start automatically on boot - usually pre-configured)   <pre><code>sudo systemctl enable &lt;service_name&gt;\n</code></pre></li> <li>Disable Service: (Prevent starting automatically on boot)   <pre><code>sudo systemctl disable &lt;service_name&gt;\n</code></pre></li> </ul>"},{"location":"support/cheatsheet/#viewing-logs-journald","title":"Viewing Logs (journald)","text":"<ul> <li>View Full Logs: Show all logs for a service (press <code>q</code> to exit).   <pre><code>sudo journalctl -u &lt;service_name&gt;\n# Example: View all Lighthouse logs\nsudo journalctl -u w3p_lighthouse-beacon\n</code></pre></li> <li>Follow Logs (Live): Watch logs as they are generated (press <code>Ctrl+C</code> to exit).   <pre><code>sudo journalctl -f -u &lt;service_name&gt;\n# Example: Follow Geth logs\nsudo journalctl -f -u w3p_geth\n</code></pre></li> <li>View Last N Lines: Show only the most recent log entries.   <pre><code>sudo journalctl -n 50 -u &lt;service_name&gt; # Shows last 50 lines\n</code></pre></li> <li>View Logs Since Time: Show logs since a specific time (e.g., \"1 hour ago\", \"2025-04-24 10:00:00\").   <pre><code>sudo journalctl --since \"1 hour ago\" -u &lt;service_name&gt;\n</code></pre></li> </ul>"},{"location":"support/cheatsheet/#system-resource-monitoring","title":"System Resource Monitoring","text":"<ul> <li>Interactive Process Viewer: Shows CPU, Memory usage, tasks.   <pre><code>htop\n</code></pre></li> <li>Disk Usage (Overall): Show usage for all mounted filesystems. (No <code>sudo</code> needed)   <pre><code>df -h\n</code></pre></li> <li>Memory Usage: Show free and used RAM and Swap. (No <code>sudo</code> needed)   <pre><code>free -h\n</code></pre></li> <li>System Uptime &amp; Load: (No <code>sudo</code> needed)   <pre><code>uptime\n</code></pre></li> </ul>"},{"location":"support/cheatsheet/#node-specific-checks","title":"Node Specific Checks","text":"<ul> <li>Geth Console (Sync Status): Attach to the Geth console. (No <code>sudo</code> needed)   <pre><code>geth attach http://localhost:8545\n# Inside the console, type:\neth.syncing\n# (Returns 'false' when synced, or sync progress object if syncing)\neth.blockNumber\n# (Shows the latest block number Geth knows)\nexit\n# (To leave the console)\n</code></pre></li> </ul>"},{"location":"support/cheatsheet/#system-updates","title":"System Updates","text":"<ul> <li>Check for Available Updates: Refreshes the package list.   <pre><code>sudo apt update\n</code></pre></li> <li>List Upgradable Packages: See what packages have updates available. (No <code>sudo</code> needed)   <pre><code>apt list --upgradable\n</code></pre></li> <li>(Use with Caution) Apply Updates: Upgrades installed packages. Refer to specific Web3 Pi update guides if available.   <pre><code>sudo apt upgrade\n</code></pre></li> </ul>"},{"location":"support/cheatsheet/#influxdb","title":"InfluxDB","text":"<p>InfluxDB stores device status measurements and serves as the data source for Grafana.</p> <p>The Influx database is fed by the <code>basic-eth2-node-monitor</code> application, which collects data from Ethereum clients. It also receives input from the <code>basic-system-monitor</code> application, which gathers operating system statistics and serves them as JSON over HTTP.</p>"},{"location":"support/cheatsheet/#clearing-the-database","title":"Clearing the Database","text":"<p>To clear the database, run the following commands:</p> <pre><code>influx\nUSE ethonrpi\nDROP SERIES FROM /.*/\nexit\n</code></pre>"},{"location":"support/cheatsheet/#nimbus","title":"Nimbus","text":"<ul> <li>Service name: <code>w3p_nimbus-beacon</code></li> <li>Default directory: <code>/mnt/storage/.nimbus/data/shared_mainnet_0</code></li> <li>Startup script: <code>/home/ethereum/clients/nimbus/nimbus.sh</code></li> </ul>"},{"location":"support/cheatsheet/#clear-saved-data","title":"Clear saved data","text":"<pre><code>sudo rm -r /mnt/storage/.nimbus/data/shared_mainnet_0\n</code></pre>"},{"location":"support/cheatsheet/#geth","title":"Geth","text":"<ul> <li>Service name: <code>w3p_geth</code></li> <li>Default directory: <code>/mnt/storage/.ethereum</code></li> <li>Startup script: <code>/home/ethereum/clients/geth/geth.sh</code></li> </ul>"},{"location":"support/cheatsheet/#clear-saved-data_1","title":"Clear saved data","text":"<pre><code>sudo rm -r /mnt/storage/.ethereum\n</code></pre>"},{"location":"support/cheatsheet/#lighthouse","title":"Lighthouse","text":"<ul> <li>Service name: <code>w3p_lighthouse-beacon</code></li> <li>Default directory: <code>/mnt/storage/.lighthouse</code></li> <li>Startup script: <code>/home/ethereum/clients/lighthouse/lighthouse.sh</code></li> </ul>"},{"location":"support/cheatsheet/#clear-saved-data_2","title":"Clear saved data","text":"<pre><code>sudo rm -r /mnt/storage/.lighthouse\n</code></pre>"},{"location":"support/cheatsheet/#jwt-secret","title":"JWT Secret","text":"<p>The <code>jwt.hex</code> file contains the JWT secret used to enable authenticated communication between the execution client and the consensus client. This file is generated by the installation script.</p> <ul> <li>Location: <code>/home/ethereum/clients/secrets/jwt.hex</code></li> </ul>"},{"location":"support/cheatsheet/#storage","title":"Storage","text":""},{"location":"support/cheatsheet/#pcie-generation","title":"PCIe Generation","text":"<p>By default, Web3 Pi uses PCIe Gen 2, which is the officially supported version. However, if you have a PCIe Gen 3 capable device, you can enable it by editing the config.txt file.</p> <p>Benefits of PCIe Gen 3:</p> <ul> <li>Higher Bandwidth: PCIe Gen 3 offers double the bandwidth compared to PCIe Gen 2. This means faster data transfer rates, which can be especially beneficial for high-speed storage devices like NVMe SSDs or network cards.</li> <li>Improved Performance: For applications that are bottlenecked by PCIe bandwidth, enabling Gen 3 can significantly improve performance.</li> </ul> <p>While Raspberry Pi 5 is designed for PCIe Gen 2, upgrading to Gen 3 can unlock more potential in compatible devices.</p> <p>Warning</p> <p>Enabling PCIe Gen 3 on a Raspberry Pi 5 can cause instability. Only proceed if you know what you're doing and have a compatible device.</p>"},{"location":"support/cheatsheet/#scripts","title":"Scripts","text":"<p>The Web3 Pi image comes with several useful scripts pre-installed. These can be found in the home directory of the ethereum user at /home/ethereum/scripts.</p> <p>Below is a description of each script and how to execute them:</p> <ul> <li> <p><code>sudo ./scripts/shutdown.sh</code>   This script gracefully shuts down the device. It first stops the services, allowing them time to finish their tasks, and then powers off the system.</p> </li> <li> <p><code>sudo ./scripts/reboot.sh</code>   This script gracefully reboots the device. It first stops the services, giving them time to complete their tasks, and then restarts the system.</p> </li> <li> <p><code>sudo ./scripts/formatMe.sh</code>   This script marks the mapped storage as \"to be formatted\" during the next installation. It\u2019s useful when reinstalling the Web3 Pi image.</p> </li> <li> <p><code>sudo ./scripts/versions.sh</code>   This script checks the versions of the currently installed applications and compares them to the latest available online. It covers applications such as Geth, Nimbus, and Lighthouse.</p> </li> <li> <p><code>sudo ./scripts/update_geth.sh</code>   This script updates the Geth application to the latest available version. It stops the service, installs the new version, and then restarts the service.</p> </li> <li> <p><code>sudo ./scripts/update_nimbus.sh</code>   This script updates the Nimbus application to the latest available version. It stops the service, installs the new version, and then restarts the service.</p> </li> <li> <p><code>sudo ./scripts/check_install.sh</code>   This script checks the installation and configuration of Web3 Pi. It verifies installed packages, active services, disk and swap usage, network connectivity, and other important aspects. The output is formatted and color-coded for better readability.</p> </li> </ul> <p>You can also view and execute scripts from the Cockpit Web3 Pi Script Runner plugin.</p>"},{"location":"support/cheatsheet/#ccze","title":"CCZE","text":"<p>Newer version of the Web3 Pi image include CCZE, which enables automatic colorization of logs from applications such as Geth and Nimbus, significantly improving readability.</p> <p>An example how to use CCZE:</p> <pre><code>sudo journalctl -xfu w3p_geth.service | ccze -A\n\nsudo journalctl -xfu w3p_nimbus-beacon.service | ccze -A\n\ncat /var/log/web3pi.log | ccze\n</code></pre>"},{"location":"support/contact/","title":"Contact","text":""},{"location":"support/contact/#discord","title":"Discord","text":"<p>You can reach us on our Discord server: Join Discord</p>"},{"location":"support/contact/#contact-form","title":"Contact Form","text":"<p>Fill out our contact form to ask a question: Contact Form</p>"},{"location":"support/contact/#github","title":"GitHub","text":"<p>For issues, projects, or contributions, visit our GitHub: GitHub Repository</p>"},{"location":"support/contact/#x-twitter","title":"X (Twitter)","text":"<p>Follow us or send us a message on X: Follow us on X</p>"},{"location":"support/troubleshooting/","title":"Troubleshooting","text":""},{"location":"support/troubleshooting/#my-node-cannot-synchronize","title":"My node cannot synchronize","text":"<p>Synchronization issues can stem from several causes. First, check your internet connection quality - unstable or slow connections significantly delay the synchronization process. Also ensure your NVMe SSD has sufficient capacity (minimum 2TB) and is functioning properly. Overheating can also slow down or interrupt synchronization, so verify that your CPU cooling is working correctly.</p> <p>If your Raspberry Pi 4 is synchronizing too slowly, remember this is normal - the process is much faster on Raspberry Pi 5. You can check synchronization progress in the Web3 Pi panel and verify if the node is actually downloading new blocks.</p> <p>If the problem persists, check: - Whether your firewall is blocking required ports - If the SSD is properly mounted and recognized by the system - If you have the latest version of Web3 Pi software</p> <p>For further assistance, join our Discord channel where you can get help from our community and team.</p>"},{"location":"use-cases/solo-staking/","title":"Solo Staking with Web3 Pi","text":"<p>Under Development &amp; High Risk</p> <p>Web3 Pi does not currently offer official support for staking configurations. Proceed at your own risk.</p> <p>While Web3 Pi provides the necessary Execution and Consensus client foundation, configuring it securely and reliably for staking requires significant technical expertise beyond the standard setup.</p> <p>You are welcome to explore configuring your node for staking independently, but please be aware:</p> <ul> <li>This is an advanced procedure.</li> <li>Web3 Pi does not currently offer official support for staking configurations.</li> <li>You proceed entirely at your own risk. Mistakes can lead to financial penalties (slashing).</li> </ul> <p>We strongly recommend thoroughly understanding the responsibilities and substantial risks involved before attempting solo staking.</p> <p>\u27a1\ufe0f Review Staking Risks and Considerations</p>"},{"location":"use-cases/transaction-firewall/","title":"Web3 Pi Transactions Firewall","text":"<p>TxFirewall is a tool that enhances the security of interactions with the Ethereum network through local RPC endpoints. It is designed to work with the Ethereum On Raspberry Pi suite.</p> <p>At its core, TxFirewall functions as a local transaction-intercepting proxy server. It acts as an intermediary between the user's wallet (e.g., MetaMask) and the RPC endpoint of their own W3P Ethereum node.</p> <p>Technically, TxFirewall listens on a specific local port configured in the wallet. When the wallet sends an RPC request, TxFirewall intercepts it. Simple data read calls (like <code>eth_getBalance</code>) can be passed directly to the W3P node. However, critical calls like <code>eth_sendTransaction</code> are halted and subjected to a verification process. Crucially, this entire process happens locally on the W3P device or the user's machine, before the transaction is broadcast to the Ethereum network.</p> <p></p>"},{"location":"use-cases/transaction-firewall/#installation","title":"Installation","text":"<p>The firewall can be installed manually on any computer by following the instructions available at Github repository: Web3 Pi Transaction Firewall.</p> <p>However, Web3 Pi Transaction Firewall is part of the Web3 Pi ecosystem, and the recommended installation method is through the Cockpit management system, accessible via the Web3 Pi Updater plugin. This installation approach automatically sets up the firewall along with the cockpit plugin, providing a complete graphical interface for firewall management.</p> <p>You can easily install Transaction Firewall on your Raspberry Pi by clicking Install in the Web3 Pi Updater plugin.</p> <p></p> <p>In this version, the entire package is installed with initial configuration. The firewall is installed as a systemd service with appropriate permissions and configuration paths to ensure it uses the local Ethereum RPC client on your Web3 Pi by default. Additionally, the package includes a Cockpit plugin for complete management and control of the firewall.</p>"},{"location":"use-cases/transaction-firewall/#configuration","title":"Configuration","text":"<p>After installation, a new item labeled Web3 Pi Tx Firewall will appear in the Cockpit Menu. The firewall configuration window looks as follows:</p> <p></p> <p>Note</p> <p>You must have administrator privileges enabled to use the Web3 Pi Tx Firewall. Otherwise, you will see a warning message: </p>"},{"location":"use-cases/transaction-firewall/#main-settings","title":"Main settings","text":"<p>The top menu of the panel provides options to stop and start the firewall service, as well as configure basic settings:</p> <p></p> <ul> <li> <p><code>Server Port</code>: Port number where the main application serves the web interface for users to verify transactions. Default: <code>8454</code></p> </li> <li> <p><code>Proxy Port</code>: Port number used for the proxy service. Used by RPC clients such as Metamask. Default: <code>18500</code></p> </li> <li> <p><code>WSS Port</code>: Port number dedicated for WebSocket connections used between the web application and the firewall. Default: <code>18501</code></p> </li> <li> <p><code>RPC Endpoint</code>: The RPC endpoint used to communicate with your Ethereum or blockchain node. Default: <code>http://localhost:8545</code> - local Ethereum node in Web3 Pi</p> </li> <li> <p><code>Interactive Mode Timeout</code>: Timeout duration for user decision in interactive mode (in seconds). Default: <code>60</code></p> </li> </ul> <p>Note</p> <p>Changing these settings requires a restart of the firewall service.</p>"},{"location":"use-cases/transaction-firewall/#opening-ports-in-os-firewall","title":"Opening ports in OS firewall","text":"<p>The default firewall application ports are blocked by the operating system firewall (USW). This is indicated by an icon next to the listed ports.</p> <p></p> <p>To use the Tx firewall, you need to unblock these ports. You can do this manually via the USW CLI or by clicking the lock icon next to each port.</p> <p>Warning</p> <p>If the ports are not open, attempting to access the firewall's frontend application will result in the following message: </p>"},{"location":"use-cases/transaction-firewall/#authorized-address","title":"Authorized address","text":"<p>In this table, you can add, edit or delete addresses that you recognize and set an appropriate name for them. This name will be displayed in the transaction verification window. It can be either an Ethereum account address or a contract address.</p> <p></p>"},{"location":"use-cases/transaction-firewall/#known-contracts","title":"Known contracts","text":"<p>In this table, you can define contracts that you recognize, including both their names and ABIs. This configuration will be used to decode transaction parameters. In the verification window, the name of the smart contract function being called and its argument names will be displayed. Additionally, if the argument type is <code>address</code>, it will be displayed with the appropriate name if it is found as an authorized address.</p> <p></p>"},{"location":"use-cases/transaction-firewall/#client-configuration-metamask","title":"Client configuration (Metamask)","text":"<p>You can configure any Ethereum RPC client - any wallet (including hardware wallets), or it can be an application using blockchain. This example demonstrates configuration instructions for the popular Metamask wallet.</p> <p>For this purpose, you need to:</p> <p>To navigate to the network configuration window in Metamask, follow the official Metamask instructions and then fill in the required fields.</p> <p></p> <p>Note</p> <p>You should use as <code>Default RPC URL</code> a URL consisting of your Pi's hostname or IP address and the port defined in the configuration as <code>Proxy Port</code></p>"},{"location":"use-cases/transaction-firewall/#usage","title":"Usage","text":"<p>To use the Tx Firewall, open the frontend application by clicking the Open Firewall App button in the top menu.</p> <p>Warning</p> <p>The Firewall in its current version works exclusively in interactive mode, which means that transactions will only be verified and rejected when the frontend application window is active. If the window is not running, all (!) transactions will be forwarded to the specified RPC node.</p>"},{"location":"use-cases/transaction-firewall/#frontend-app","title":"Frontend App","text":"<p>After opening the application, you can monitor transactions in the window:</p> <p></p> <p>If for any reason you lose the connection, you should see a notification message. </p> <p></p> <p>Warning</p> <p>Remember! In such a situation, the Firewall operates in mode: Accepts everything!</p>"},{"location":"use-cases/transaction-firewall/#validating-transaction","title":"Validating transaction","text":""},{"location":"use-cases/transaction-firewall/#simple-transfer","title":"Simple transfer","text":"<p>During a simple funds transfer from one account to another, the transfer transaction will be displayed in the application window with properly tagged addresses if they have been defined as Authorized Addresses.</p> <p></p> <p>You can accept or reject the displayed transaction within the time shown on the screen.</p> <p>Note</p> <p>If you don't make a decision within the specified time, the transaction will be automatically rejected! The decision time is set in the <code>Interactive Mode Timeout</code> parameter.</p>"},{"location":"use-cases/transaction-firewall/#contract-call","title":"Contract call","text":"<p>If you execute a transaction on a smart contract - for example, an ERC-20 token transfer like Golem Network Token - by calling the transfer function on a specific smart contract, it will be decoded and displayed in the application window.</p> <p></p> <p>Note</p> <p>Pay attention that the address fields have been tagged with names defined in the <code>Authorized Addresses</code> and <code>Known Contract</code> tables. If these definitions weren't present, the labels would display as <code>Unknown</code>.</p> <p>If you make a transaction on a contract that hasn't been defined in the <code>Known Contracts</code> table, a data field with undecoded transaction data in hexadecimal format will appear in the verification window.</p> <p></p> <p>Note</p> <p>That's why it's important to define contract ABIs for proper transaction verification!</p>"},{"location":"use-cases/transaction-firewall/#predefined-standard-interfaces","title":"Predefined Standard Interfaces","text":"<p>If a contract address is not matched with any entries in the <code>Known Contracts</code> table, the firewall attempts to recognize and match the contract data against a set of predefined standard interfaces:</p> <ul> <li> <p>Main standards:</p> <ul> <li>ERC20 - Standard interface for fungible tokens</li> <li>ERC721 - Standard interface for non-fungible tokens (NFTs)</li> <li>ERC1155 - Multi-token standard</li> <li>ERC4626 - Tokenized vault standard</li> </ul> </li> <li> <p>Popular extensions:</p> <ul> <li>ERC20Burnable - ERC20 extension allowing token burning</li> </ul> </li> <li> <p>Popular utility contracts:</p> <ul> <li>Ownable - Contracts with ownership functionality</li> <li>AccessControl - Contracts with role-based access control</li> </ul> </li> </ul> <p>All these interfaces are imported from the OpenZeppelin library, which provides secure and community-vetted implementations of common smart contract standards. This automatic detection allows the firewall to correctly parse and display transaction data. Contract will be tagged as <code>Possible Interface: ...</code></p> <p></p>"},{"location":"use-cases/transaction-firewall/#logs","title":"Logs","text":"<p>While operating and using the firewall, you can view service logs in the Cockpit panel, where firewall activities are recorded:</p> <p></p> <p>By clicking on a specific log entry, you can see its details. Logs are stored in JSON format:</p> <pre><code>{\n  \"level\": 30,\n  \"time\": \"2025-04-25T16:54:57.819Z\",\n  \"pid\": 33525,\n  \"hostname\": \"eop-1\",\n  \"transaction\": {\n    \"id\": \"0xd1490ab481cb7c2d7713a98fa52878300d04ae750b73ed42e28724387aa840a1\",\n    \"from\": \"0x19ee20338a4c4bf8f6aebc79d9d3af2a01434119\",\n    \"to\": \"0x7dd9c5cba05e151c895fde1cf355c9a1d5da6429\",\n    \"value\": \"0\",\n    \"data\": \"0xa9059cbb000000000000000000000000de07073781cadad26053b6d36d8768f0bd283751000000000000000000000000000000000000000000000000001c6bf526340000\",\n    \"labelFrom\": \"Bob\",\n    \"labelTo\": \"GLM Token Contract\",\n    \"txType\": \"contract-call\",\n    \"contractInfo\": {\n      \"address\": \"0x7dd9c5cba05e151c895fde1cf355c9a1d5da6429\",\n      \"labelAddress\": \"Golem Contract\",\n      \"functionName\": \"transfer\",\n      \"args\": [\n        {\n          \"name\": \"recipient\",\n          \"type\": \"address\",\n          \"value\": \"0xdE07073781CADaD26053b6d36D8768f0bD283751\",\n          \"label\": \"Alice\"\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"uint256\",\n          \"value\": \"8000000000000000\"\n        }\n      ]\n    }\n  },\n  \"msg\": \"Transaction accepted\"\n}\n</code></pre>"},{"location":"use-cases/transaction-firewall/#security","title":"Security","text":""},{"location":"use-cases/transaction-firewall/#limitations","title":"Limitations","text":"<p>Currently, only the Interactive Mode of the Firewall is available. This means that transaction verification can only be performed when the frontend application is open.</p> <ul> <li>If the web page is not open, the service automatically forwards all requests to the configured RPC endpoint</li> <li>Only one web page instance may be opened at a time</li> <li>Opening an additional webpage instance drops the old connection and redirects all queries to the current page</li> <li>This is an asynchronous service, but it serves only one request at a time</li> <li>Requests are not queued</li> <li>New requests sent during the processing of a previous one are automatically forwarded to the configured RPC endpoint</li> </ul>"},{"location":"use-cases/transaction-firewall/#more-about-threats","title":"More about threats...","text":"<p>You can read more about the need to use the Firewall together with Web3 Pi on our blog Fortify Your Ethereum Journey Web3 Pi Transaction Firewall</p>"},{"location":"use-cases/wallet/","title":"Connect Your Wallet to Your Node","text":"<p>One of the significant advantages of running your own Ethereum node with Web3 Pi is the ability to use it as a private and trusted backend for your crypto wallets, such as MetaMask. Instead of relying on default public RPC endpoints provided by wallet developers or third parties, you can point your wallet directly to your own node running on your local network.</p>"},{"location":"use-cases/wallet/#why-connect-your-wallet-to-your-own-node","title":"Why Connect Your Wallet to Your Own Node?","text":"<ul> <li>Enhanced Privacy: When you use public RPC endpoints, the provider could potentially log your IP address and the wallet addresses you query. By using your own node, your transaction lookups and balance checks stay within your local network, significantly improving your privacy.</li> <li>Increased Reliability: Public endpoints can sometimes become congested or experience downtime. Your own node provides a dedicated resource that you control, potentially offering more consistent availability (assuming your node and internet connection are stable).</li> <li>Trust Minimization: You are directly querying the Ethereum blockchain state as validated by your node, rather than trusting a third-party provider's node. This aligns with the core principles of decentralization.</li> <li>No Rate Limiting: Public RPCs often have rate limits to prevent abuse. Your own node doesn't impose such external limits (though it's still bound by its own processing capabilities).</li> </ul>"},{"location":"use-cases/wallet/#prerequisites","title":"Prerequisites","text":"<ol> <li>Web3 Pi Node Running: Your Raspberry Pi must be powered on, connected to your network, and the Ethereum Execution Client must be running and fully synced with the network you intend to use (e.g., Mainnet, Sepolia).</li> <li>Wallet Installed: You need a wallet that supports custom RPC endpoints (MetaMask is a common example).</li> <li>Node's Local IP Address or Hostname: You need to know the IP address (e.g., <code>192.168.1.123</code>) or hostname (e.g., <code>web3pi.local</code>) of your Raspberry Pi on your local network. Consult the Cheatsheet if you're not sure how to find it.</li> </ol>"},{"location":"use-cases/wallet/#finding-your-nodes-rpc-address","title":"Finding Your Node's RPC Address","text":"<p>Your Execution Client exposes an RPC endpoint that wallets can connect to. You can access it in a few ways:</p> <ol> <li> <p>Local IP Address: Use your node's IP address on your local network.</p> <ul> <li>Format: <code>http://&lt;your-pi-ip-address&gt;:&lt;rpc-port&gt;</code></li> <li>Default Port: <code>8545</code></li> <li>Example: <code>http://192.168.1.123:8545</code></li> <li>Use Case: Connecting from devices on the same local network (Wi-Fi).</li> </ul> </li> <li> <p>Local Hostname: Use the hostname assigned to your node.</p> <ul> <li>Format: <code>http://&lt;your-pi-hostname&gt;:&lt;rpc-port&gt;</code></li> <li>Default Port: <code>8545</code></li> <li>Example: <code>http://web3pi.local:8545</code></li> <li>Use Case: Connecting from devices on the same local network (Wi-Fi). Requires local DNS resolution (mDNS/Bonjour) to work.</li> </ul> </li> <li> <p>Web3 Pi Link Address (Remote Access): If you have set up Web3 Pi Link, you can use the secure public HTTPS URL provided by the service.</p> <ul> <li>Format: <code>https://&lt;your-chosen-name&gt;.web3pi.link</code></li> <li>(Note: Web3 Pi Link handles the port mapping and provides a standard HTTPS port 443 endpoint).</li> <li>Example: <code>https://my-awesome-node.web3pi.link</code></li> <li>Use Case: Connecting from anywhere, including outside your local network (e.g., when you're not home).</li> </ul> </li> </ol> <p>Choose the appropriate address based on how and where you want to connect to your node.</p>"},{"location":"use-cases/wallet/#configuration-steps-metamask-example","title":"Configuration Steps (MetaMask Example)","text":"<p>MetaMask doesn't allow adding a new network with the same Chain ID as an existing one (like Mainnet <code>1</code>, Sepolia <code>11155111</code>, etc.). Therefore, to use your node for these standard networks, you need to edit the existing network settings in MetaMask.</p> <p>Editing an Existing Network (e.g., Mainnet, Sepolia):</p> <ol> <li>Open MetaMask: Unlock your MetaMask extension.</li> <li>Network Dropdown: Click on the network selection dropdown menu (top-left).</li> <li>Open the Edit Network Wizard: Click the \"Edit\" button in the network dropdown.     </li> <li> <p>Update RPC URL: Locate the \"Default RPC URL\" field and add a new RPC URL.</p> <p></p> <ul> <li>For local access: <code>http://web3pi.local:8545</code> or <code>http://192.168.1.123:8545</code> (Use <code>http</code>)</li> <li>For remote access via Web3 Pi Link: <code>https://my-awesome-node.web3pi.link</code> (Use <code>https</code>)</li> </ul> </li> <li> <p>Select Your RPC Now that you've added your RPC endpoint, select it from the dropdown menu.</p> <p></p> </li> <li> <p>(Optional) Rename the network: You can rename the network to something more descriptive (e.g., <code>Web3 Pi Mainnet</code> or <code>Ethereum Mainnet (Web3 Pi)</code>).</p> </li> <li>Save: Click the \"Save\" button.     Your MetaMask wallet is now configured to communicate directly with your own Web3 Pi Ethereum node using the specified RPC URL.</li> </ol>"},{"location":"use-cases/wallet/#important-considerations","title":"Important Considerations","text":"<ul> <li>Local vs. Remote: Remember to use the local <code>http://...:8545</code> address only when your wallet device is on the same network as the Pi. Use the <code>https://....web3pi.link</code> address for access from anywhere else.</li> <li>Security (Manual Exposure): The default Web3 Pi setup exposes the RPC port (<code>8545</code>) only locally. Do not manually configure your router/firewall to expose port 8545 directly to the public internet unless you implement robust security. Web3 Pi Link is the recommended way to achieve secure remote access.</li> </ul>"},{"location":"welcome-box/","title":"Web3 Pi WelcomeBox","text":""},{"location":"welcome-box/#the-complete-starter-kit-for-ethereum-nodes-on-raspberry-pi","title":"The Complete Starter Kit for Ethereum Nodes on Raspberry Pi","text":"<p>The Web3 Pi WelcomeBox is designed to be an all-in-one package, providing you with everything you need to launch your own Ethereum node on a Raspberry Pi 5 with a seamless setup experience.</p> <p>It bundles compatible, tested hardware components to save you the time and effort of sourcing them individually.</p>"},{"location":"welcome-box/#whats-inside","title":"What\u2019s Inside?","text":"<p>The WelcomeBox includes the following components:</p> Photo Product name Store Link Raspberry Pi 5 - 8GB RAMThe heart of Web3 Pi. Powered by an efficient ARM processor, it delivers high performance while maintaining energy efficiency. TME / Kamami / Botland Official Raspberry Pi 5 power supplyOfficial Raspberry Pi 5 power adapter with a USB-C connector. Delivers up to 27W for stable and reliable operation. TME / Kamami / Botland 2TB m.2 storage: Lexar NM790 or Goodram PX700A high-speed 2TB NVMe storage for fast blockchain synchronization. Designed for low power consumption, high performance, and long life. Lexar NM790:Product page / Morele.netGoodram PX700:Product page / Morele.net Argon Neo 5 NVMe enclosureA compact enclosure with active cooling. It looks sleek, provides excellent thermal management, and fits in any corner. Kamami / Botland microSD CardHigh-speed microSD card (preferably 32GB or larger) for storing the operating system and node data files, with plenty of space for future expansions. Kamami / Botland Color LCD DashboardA high-quality LCD screen designed to provide real-time insights into your node and operating system status. Kamami / Botland 3D Printed CoverA custom-designed plastic cover, 3D printed specifically for Web3 Pi. It allows for mounting the LCD display while providing a sleek and functional finish. 3D models Ethernet Cable cat. 5eA 2-meter high-quality Ethernet cable, included to complete the set. TME / Kamami / Botland microSD Card Reader: Ugreen CR127A handy tool for flashing your microSD card with the operating system and node data. Ugreen / Morele.net microHDMI-HDMI cableNot required for running Web3 Pi, but invaluable for troubleshooting and initial setup. TME / Kamami / Botland PliersHandy pliers that make hardware assembly easier. Ideal for gripping small components and included for your convenience. TME / Kamami / Botland Screwdrivers: PH0 and flat 3mmA set of screwdrivers to tighten screws and secure components. Included to ensure you have everything needed to set up Web3 Pi. PH0: TMEflat: TME <p>(Note: Exact components like storage brand or specific tool types may vary slightly based on availability, but will meet the required specifications.)</p>"},{"location":"welcome-box/#assembly-and-setup","title":"Assembly and Setup","text":"<p>Follow the instructions in the Full Setup Guide to assemble and configure your Web3 Pi.</p>"},{"location":"welcome-box/#availability","title":"Availability","text":"<p>Coming soon</p>"}]}